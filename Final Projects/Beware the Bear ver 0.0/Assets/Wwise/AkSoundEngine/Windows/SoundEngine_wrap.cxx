/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <AK/SoundEngine/Common/AkTypes.h>


#include <AK/SoundEngine/Common/AkSoundEngine.h>
#include <AK/SoundEngine/Common/AkModule.h>
#include <AK/SoundEngine/Common/AkStreamMgrModule.h>
#include <AK/MusicEngine/Common/AkMusicEngine.h>
#include "../Common/AkCallbackSerializer.h"
#include <AK/Tools/Common/AkMonitorError.h>
#include <AK/Tools/Common/AkPlatformFuncs.h>
#include <AK/SoundEngine/Common/AkDynamicDialogue.h>
#include "../Common/AkDynamicSequence_PlaylistItem.h"
#include "../Common/AkDynamicSequence_Playlist.h"
#include <AK/SoundEngine/Common/AkQueryParameters.h>
#include <AK/MotionEngine/Common/AkMotionEngine.h>

using namespace AK;
using namespace AK::SoundEngine::DynamicSequence;
using namespace AK::SoundEngine::Query;


#include "../Common/AkArrayProxy.h"


typedef AkArray<AK::SoundEngine::DynamicSequence::PlaylistItem, AK::SoundEngine::DynamicSequence::PlaylistItem const &, ArrayPoolDefault, 4>::Iterator Iterator;


extern "C" void Term( );



extern "C" AKRESULT Init( 
			AkMemSettings *     in_pMemSettings,
			AkStreamMgrSettings * in_pStmSettings,
			AkDeviceSettings *  in_pDefaultDeviceSettings,
			AkInitSettings *    in_pSettings,
			AkPlatformInitSettings * in_pPlatformSettings,
			AkMusicSettings *	in_pMusicSettings
			);
			
extern "C" void GetDefaultStreamSettings(AkStreamMgrSettings & out_settings);
extern "C" void GetDefaultDeviceSettings(AkDeviceSettings & out_settings);
extern "C" void GetDefaultMusicSettings(AkMusicSettings &out_settings);
extern "C" void GetDefaultInitSettings(AkInitSettings & out_settings);
extern "C" void GetDefaultPlatformInitSettings(AkPlatformInitSettings &out_settings);

#ifdef AK_SUPPORT_WCHAR
	extern "C" AKRESULT SetBasePath(const wchar_t* in_pszBasePath);
	extern "C" AKRESULT SetBankPath(const wchar_t* in_pszBankPath);
	extern "C" AKRESULT SetAudioSrcPath(const wchar_t* in_pszAudioSrcPath);
	extern "C" AKRESULT SetCurrentLanguage(const wchar_t* in_pszAudioSrcPath);
#else
	extern "C" AKRESULT SetBasePath(AkOSChar* in_pszBasePath);
	extern "C" AKRESULT SetBankPath(AkOSChar* in_pszBankPath);
	extern "C" AKRESULT SetAudioSrcPath(AkOSChar* in_pszAudioSrcPath);
	extern "C" AKRESULT SetCurrentLanguage(const AkOSChar* in_pszAudioSrcPath);
#endif

//Override for SetPosition to avoid filling a AkSoundPosition in C# and marshall that. 
extern "C" AKRESULT SetObjectPosition( AkGameObjectID in_GameObjectID, 
	AkReal32 PosX, AkReal32 PosY, AkReal32 PosZ, 
	AkReal32 OrientationX, AkReal32 OrientationY, AkReal32 OrientationZ)
{
	if (!AK::SoundEngine::IsInitialized())
		return AK_Fail;

    AkSoundPosition pos;
    pos.Position.X = PosX;
    pos.Position.Y = PosY;
    pos.Position.Z = PosZ;
    pos.Orientation.X = OrientationX;
    pos.Orientation.Y = OrientationY;
    pos.Orientation.Z = OrientationZ;
    
	return AK::SoundEngine::SetPosition(in_GameObjectID, pos);
}

extern "C" AKRESULT SetListenerPosition( AkReal32 FrontX, AkReal32 FrontY, AkReal32 FrontZ, 
									 AkReal32 TopX, AkReal32 TopY, AkReal32 TopZ, 
									 AkReal32 PosX, AkReal32 PosY, AkReal32 PosZ, 
									 AkUInt32 in_ulListenerIndex)
{
	if (!AK::SoundEngine::IsInitialized())
		return AK_Fail;

    AkListenerPosition pos;
    pos.OrientationFront.X = FrontX;
    pos.OrientationFront.Y = FrontY;
    pos.OrientationFront.Z = FrontZ;
    pos.OrientationTop.X = TopX;
    pos.OrientationTop.Y = TopY;
    pos.OrientationTop.Z = TopZ;
    pos.Position.X = PosX;
    pos.Position.Y = PosY;
    pos.Position.Z = PosZ;
    
	return AK::SoundEngine::SetListenerPosition(pos, in_ulListenerIndex);

}

//Redeclaring, despite the ignore above.  It is done this way because the %exception statement below would add a check to the IsInitialized call, to check if the sound engine is initialized...  
extern "C" bool IsInitialized()
{
	return AK::SoundEngine::IsInitialized();
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_VirtualAllocHook(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  AkUInt32 arg3 ;
  AkUInt32 arg4 ;
  void *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkUInt32)jarg4; 
  result = (void *)AK::VirtualAllocHook(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VirtualFreeHook(void * jarg1, unsigned long jarg2, unsigned long jarg3) {
  void *arg1 = (void *) 0 ;
  size_t arg2 ;
  AkUInt32 arg3 ;
  
  arg1 = jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  AK::VirtualFreeHook(arg1,arg2,arg3);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AK_INVALID_AUX_ID_get() {
  unsigned long jresult ;
  AkAuxBusID result;
  
  result = (AkAuxBusID)(AkAuxBusID)AK_INVALID_AUX_ID;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AK_INVALID_CHANNELMASK_get() {
  unsigned long jresult ;
  AkChannelMask result;
  
  result = (AkChannelMask)(AkChannelMask)AK_INVALID_CHANNELMASK;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AK_INVALID_OUTPUT_DEVICE_ID_get() {
  unsigned long jresult ;
  AkUInt32 result;
  
  result = (AkUInt32)(AkUInt32)AK_INVALID_OUTPUT_DEVICE_ID;
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_iExternalSrcCookie_set(void * jarg1, unsigned long jarg2) {
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->iExternalSrcCookie = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkExternalSourceInfo_iExternalSrcCookie_get(void * jarg1) {
  unsigned long jresult ;
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->iExternalSrcCookie);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_idCodec_set(void * jarg1, unsigned long jarg2) {
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkCodecID arg2 ;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  arg2 = (AkCodecID)jarg2; 
  if (arg1) (arg1)->idCodec = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkExternalSourceInfo_idCodec_get(void * jarg1) {
  unsigned long jresult ;
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkCodecID result;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  result = (AkCodecID) ((arg1)->idCodec);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_szFile_set(void * jarg1, wchar_t* jarg2) {
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkOSChar *arg2 = (AkOSChar *) 0 ;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  CONVERT_WIDE_TO_OSCHAR(jarg2, arg2); 
  if (arg1) (arg1)->szFile = arg2;
}


SWIGEXPORT wchar_t* SWIGSTDCALL CSharp_AkExternalSourceInfo_szFile_get(void * jarg1) {
  wchar_t* jresult ;
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkOSChar *result = 0 ;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  result = (AkOSChar *) ((arg1)->szFile);
  CONVERT_OSCHAR_TO_WIDE(result, jresult); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_pInMemory_set(void * jarg1, void * jarg2) {
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pInMemory = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkExternalSourceInfo_pInMemory_get(void * jarg1) {
  void * jresult ;
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  result = (void *) ((arg1)->pInMemory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_uiMemorySize_set(void * jarg1, unsigned long jarg2) {
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uiMemorySize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkExternalSourceInfo_uiMemorySize_get(void * jarg1) {
  unsigned long jresult ;
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->uiMemorySize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkExternalSourceInfo_idFile_set(void * jarg1, unsigned long jarg2) {
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkFileID arg2 ;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  arg2 = (AkFileID)jarg2; 
  if (arg1) (arg1)->idFile = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkExternalSourceInfo_idFile_get(void * jarg1) {
  unsigned long jresult ;
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  AkFileID result;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  result = (AkFileID) ((arg1)->idFile);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExternalSourceInfo__SWIG_0() {
  void * jresult ;
  AkExternalSourceInfo *result = 0 ;
  
  result = (AkExternalSourceInfo *)new AkExternalSourceInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExternalSourceInfo__SWIG_1(void * jarg1, unsigned long jarg2, unsigned long jarg3, unsigned long jarg4) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  AkUInt32 arg3 ;
  AkCodecID arg4 ;
  AkExternalSourceInfo *result = 0 ;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkCodecID)jarg4; 
  result = (AkExternalSourceInfo *)new AkExternalSourceInfo(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExternalSourceInfo__SWIG_2(wchar_t* jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  AkOSChar *arg1 = (AkOSChar *) 0 ;
  AkUInt32 arg2 ;
  AkCodecID arg3 ;
  AkExternalSourceInfo *result = 0 ;
  
  CONVERT_WIDE_TO_OSCHAR(jarg1, arg1); 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkCodecID)jarg3; 
  result = (AkExternalSourceInfo *)new AkExternalSourceInfo(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkExternalSourceInfo__SWIG_3(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  void * jresult ;
  AkFileID arg1 ;
  AkUInt32 arg2 ;
  AkCodecID arg3 ;
  AkExternalSourceInfo *result = 0 ;
  
  arg1 = (AkFileID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkCodecID)jarg3; 
  result = (AkExternalSourceInfo *)new AkExternalSourceInfo(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkExternalSourceInfo(void * jarg1) {
  AkExternalSourceInfo *arg1 = (AkExternalSourceInfo *) 0 ;
  
  arg1 = (AkExternalSourceInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkVector_X_set(void * jarg1, float jarg2) {
  AkVector *arg1 = (AkVector *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkVector *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkVector_X_get(void * jarg1) {
  float jresult ;
  AkVector *arg1 = (AkVector *) 0 ;
  AkReal32 result;
  
  arg1 = (AkVector *)jarg1; 
  result = (AkReal32) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkVector_Y_set(void * jarg1, float jarg2) {
  AkVector *arg1 = (AkVector *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkVector *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkVector_Y_get(void * jarg1) {
  float jresult ;
  AkVector *arg1 = (AkVector *) 0 ;
  AkReal32 result;
  
  arg1 = (AkVector *)jarg1; 
  result = (AkReal32) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkVector_Z_set(void * jarg1, float jarg2) {
  AkVector *arg1 = (AkVector *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkVector *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkVector_Z_get(void * jarg1) {
  float jresult ;
  AkVector *arg1 = (AkVector *) 0 ;
  AkReal32 result;
  
  arg1 = (AkVector *)jarg1; 
  result = (AkReal32) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkVector() {
  void * jresult ;
  AkVector *result = 0 ;
  
  {
    result = (AkVector *)new AkVector();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkVector(void * jarg1) {
  AkVector *arg1 = (AkVector *) 0 ;
  
  arg1 = (AkVector *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSoundPosition_Position_set(void * jarg1, void * jarg2) {
  AkSoundPosition *arg1 = (AkSoundPosition *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkSoundPosition *)jarg1; 
  arg2 = (AkVector *)jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkSoundPosition_Position_get(void * jarg1) {
  void * jresult ;
  AkSoundPosition *arg1 = (AkSoundPosition *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkSoundPosition *)jarg1; 
  result = (AkVector *)& ((arg1)->Position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSoundPosition_Orientation_set(void * jarg1, void * jarg2) {
  AkSoundPosition *arg1 = (AkSoundPosition *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkSoundPosition *)jarg1; 
  arg2 = (AkVector *)jarg2; 
  if (arg1) (arg1)->Orientation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkSoundPosition_Orientation_get(void * jarg1) {
  void * jresult ;
  AkSoundPosition *arg1 = (AkSoundPosition *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkSoundPosition *)jarg1; 
  result = (AkVector *)& ((arg1)->Orientation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkSoundPosition() {
  void * jresult ;
  AkSoundPosition *result = 0 ;
  
  {
    result = (AkSoundPosition *)new AkSoundPosition();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkSoundPosition(void * jarg1) {
  AkSoundPosition *arg1 = (AkSoundPosition *) 0 ;
  
  arg1 = (AkSoundPosition *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkListenerPosition_OrientationFront_set(void * jarg1, void * jarg2) {
  AkListenerPosition *arg1 = (AkListenerPosition *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkListenerPosition *)jarg1; 
  arg2 = (AkVector *)jarg2; 
  if (arg1) (arg1)->OrientationFront = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkListenerPosition_OrientationFront_get(void * jarg1) {
  void * jresult ;
  AkListenerPosition *arg1 = (AkListenerPosition *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkListenerPosition *)jarg1; 
  result = (AkVector *)& ((arg1)->OrientationFront);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkListenerPosition_OrientationTop_set(void * jarg1, void * jarg2) {
  AkListenerPosition *arg1 = (AkListenerPosition *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkListenerPosition *)jarg1; 
  arg2 = (AkVector *)jarg2; 
  if (arg1) (arg1)->OrientationTop = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkListenerPosition_OrientationTop_get(void * jarg1) {
  void * jresult ;
  AkListenerPosition *arg1 = (AkListenerPosition *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkListenerPosition *)jarg1; 
  result = (AkVector *)& ((arg1)->OrientationTop);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkListenerPosition_Position_set(void * jarg1, void * jarg2) {
  AkListenerPosition *arg1 = (AkListenerPosition *) 0 ;
  AkVector *arg2 = (AkVector *) 0 ;
  
  arg1 = (AkListenerPosition *)jarg1; 
  arg2 = (AkVector *)jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkListenerPosition_Position_get(void * jarg1) {
  void * jresult ;
  AkListenerPosition *arg1 = (AkListenerPosition *) 0 ;
  AkVector *result = 0 ;
  
  arg1 = (AkListenerPosition *)jarg1; 
  result = (AkVector *)& ((arg1)->Position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkListenerPosition() {
  void * jresult ;
  AkListenerPosition *result = 0 ;
  
  {
    result = (AkListenerPosition *)new AkListenerPosition();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkListenerPosition(void * jarg1) {
  AkListenerPosition *arg1 = (AkListenerPosition *) 0 ;
  
  arg1 = (AkListenerPosition *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpeakerVolumes_fFrontLeft_set(void * jarg1, float jarg2) {
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fFrontLeft = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpeakerVolumes_fFrontLeft_get(void * jarg1) {
  float jresult ;
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  result = (AkReal32) ((arg1)->fFrontLeft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpeakerVolumes_fFrontRight_set(void * jarg1, float jarg2) {
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fFrontRight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpeakerVolumes_fFrontRight_get(void * jarg1) {
  float jresult ;
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  result = (AkReal32) ((arg1)->fFrontRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpeakerVolumes_fCenter_set(void * jarg1, float jarg2) {
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fCenter = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpeakerVolumes_fCenter_get(void * jarg1) {
  float jresult ;
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  result = (AkReal32) ((arg1)->fCenter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpeakerVolumes_fRearLeft_set(void * jarg1, float jarg2) {
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fRearLeft = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpeakerVolumes_fRearLeft_get(void * jarg1) {
  float jresult ;
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  result = (AkReal32) ((arg1)->fRearLeft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpeakerVolumes_fRearRight_set(void * jarg1, float jarg2) {
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fRearRight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpeakerVolumes_fRearRight_get(void * jarg1) {
  float jresult ;
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  result = (AkReal32) ((arg1)->fRearRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpeakerVolumes_fSideLeft_set(void * jarg1, float jarg2) {
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fSideLeft = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpeakerVolumes_fSideLeft_get(void * jarg1) {
  float jresult ;
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  result = (AkReal32) ((arg1)->fSideLeft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpeakerVolumes_fSideRight_set(void * jarg1, float jarg2) {
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fSideRight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpeakerVolumes_fSideRight_get(void * jarg1) {
  float jresult ;
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  result = (AkReal32) ((arg1)->fSideRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSpeakerVolumes_fLfe_set(void * jarg1, float jarg2) {
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fLfe = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkSpeakerVolumes_fLfe_get(void * jarg1) {
  float jresult ;
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  AkReal32 result;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  result = (AkReal32) ((arg1)->fLfe);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkSpeakerVolumes() {
  void * jresult ;
  AkSpeakerVolumes *result = 0 ;
  
  {
    result = (AkSpeakerVolumes *)new AkSpeakerVolumes();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkSpeakerVolumes(void * jarg1) {
  AkSpeakerVolumes *arg1 = (AkSpeakerVolumes *) 0 ;
  
  arg1 = (AkSpeakerVolumes *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAuxSendValue_auxBusID_set(void * jarg1, unsigned long jarg2) {
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkAuxBusID arg2 ;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  arg2 = (AkAuxBusID)jarg2; 
  if (arg1) (arg1)->auxBusID = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkAuxSendValue_auxBusID_get(void * jarg1) {
  unsigned long jresult ;
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkAuxBusID result;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  result = (AkAuxBusID) ((arg1)->auxBusID);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkAuxSendValue_fControlValue_set(void * jarg1, float jarg2) {
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fControlValue = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkAuxSendValue_fControlValue_get(void * jarg1) {
  float jresult ;
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  AkReal32 result;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  result = (AkReal32) ((arg1)->fControlValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkAuxSendValue(void * jarg1) {
  AkAuxSendValue *arg1 = (AkAuxSendValue *) 0 ;
  
  arg1 = (AkAuxSendValue *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkVolumeOffset_fNext_set(void * jarg1, float jarg2) {
  AkVolumeOffset *arg1 = (AkVolumeOffset *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkVolumeOffset *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fNext = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkVolumeOffset_fNext_get(void * jarg1) {
  float jresult ;
  AkVolumeOffset *arg1 = (AkVolumeOffset *) 0 ;
  AkReal32 result;
  
  arg1 = (AkVolumeOffset *)jarg1; 
  result = (AkReal32) ((arg1)->fNext);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkVolumeOffset_fPrev_set(void * jarg1, float jarg2) {
  AkVolumeOffset *arg1 = (AkVolumeOffset *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkVolumeOffset *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fPrev = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkVolumeOffset_fPrev_get(void * jarg1) {
  float jresult ;
  AkVolumeOffset *arg1 = (AkVolumeOffset *) 0 ;
  AkReal32 result;
  
  arg1 = (AkVolumeOffset *)jarg1; 
  result = (AkReal32) ((arg1)->fPrev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkVolumeOffset() {
  void * jresult ;
  AkVolumeOffset *result = 0 ;
  
  {
    result = (AkVolumeOffset *)new AkVolumeOffset();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkVolumeOffset(void * jarg1) {
  AkVolumeOffset *arg1 = (AkVolumeOffset *) 0 ;
  
  arg1 = (AkVolumeOffset *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WwiseObjectIDext_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  WwiseObjectIDext *arg1 = (WwiseObjectIDext *) 0 ;
  WwiseObjectIDext *arg2 = 0 ;
  bool result;
  
  arg1 = (WwiseObjectIDext *)jarg1; 
  arg2 = (WwiseObjectIDext *)jarg2;
  if (!arg2) {
    return 0;
  } 
  result = (bool)((WwiseObjectIDext const *)arg1)->operator ==((WwiseObjectIDext const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WwiseObjectIDext_GetNodeType(void * jarg1) {
  int jresult ;
  WwiseObjectIDext *arg1 = (WwiseObjectIDext *) 0 ;
  AkNodeType result;
  
  arg1 = (WwiseObjectIDext *)jarg1; 
  result = (AkNodeType)(arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WwiseObjectIDext_id_set(void * jarg1, unsigned long jarg2) {
  WwiseObjectIDext *arg1 = (WwiseObjectIDext *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (WwiseObjectIDext *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WwiseObjectIDext_id_get(void * jarg1) {
  unsigned long jresult ;
  WwiseObjectIDext *arg1 = (WwiseObjectIDext *) 0 ;
  AkUniqueID result;
  
  arg1 = (WwiseObjectIDext *)jarg1; 
  result = (AkUniqueID) ((arg1)->id);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WwiseObjectIDext_bIsBus_set(void * jarg1, unsigned int jarg2) {
  WwiseObjectIDext *arg1 = (WwiseObjectIDext *) 0 ;
  bool arg2 ;
  
  arg1 = (WwiseObjectIDext *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsBus = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WwiseObjectIDext_bIsBus_get(void * jarg1) {
  unsigned int jresult ;
  WwiseObjectIDext *arg1 = (WwiseObjectIDext *) 0 ;
  bool result;
  
  arg1 = (WwiseObjectIDext *)jarg1; 
  result = (bool) ((arg1)->bIsBus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WwiseObjectIDext() {
  void * jresult ;
  WwiseObjectIDext *result = 0 ;
  
  {
    result = (WwiseObjectIDext *)new WwiseObjectIDext();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WwiseObjectIDext(void * jarg1) {
  WwiseObjectIDext *arg1 = (WwiseObjectIDext *) 0 ;
  
  arg1 = (WwiseObjectIDext *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WwiseObjectID__SWIG_0() {
  void * jresult ;
  WwiseObjectID *result = 0 ;
  
  result = (WwiseObjectID *)new WwiseObjectID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WwiseObjectID__SWIG_1(unsigned long jarg1) {
  void * jresult ;
  AkUniqueID arg1 ;
  WwiseObjectID *result = 0 ;
  
  arg1 = (AkUniqueID)jarg1; 
  result = (WwiseObjectID *)new WwiseObjectID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WwiseObjectID__SWIG_2(unsigned long jarg1, unsigned int jarg2) {
  void * jresult ;
  AkUniqueID arg1 ;
  bool arg2 ;
  WwiseObjectID *result = 0 ;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (WwiseObjectID *)new WwiseObjectID(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WwiseObjectID__SWIG_3(unsigned long jarg1, int jarg2) {
  void * jresult ;
  AkUniqueID arg1 ;
  AkNodeType arg2 ;
  WwiseObjectID *result = 0 ;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkNodeType)jarg2; 
  result = (WwiseObjectID *)new WwiseObjectID(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WwiseObjectID(void * jarg1) {
  WwiseObjectID *arg1 = (WwiseObjectID *) 0 ;
  
  arg1 = (WwiseObjectID *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnvelopePoint_uPosition_set(void * jarg1, unsigned long jarg2) {
  AkFileParser::EnvelopePoint *arg1 = (AkFileParser::EnvelopePoint *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkFileParser::EnvelopePoint *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uPosition = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EnvelopePoint_uPosition_get(void * jarg1) {
  unsigned long jresult ;
  AkFileParser::EnvelopePoint *arg1 = (AkFileParser::EnvelopePoint *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkFileParser::EnvelopePoint *)jarg1; 
  result = (AkUInt32) ((arg1)->uPosition);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnvelopePoint_uAttenuation_set(void * jarg1, unsigned short jarg2) {
  AkFileParser::EnvelopePoint *arg1 = (AkFileParser::EnvelopePoint *) 0 ;
  AkUInt16 arg2 ;
  
  arg1 = (AkFileParser::EnvelopePoint *)jarg1; 
  arg2 = (AkUInt16)jarg2; 
  if (arg1) (arg1)->uAttenuation = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EnvelopePoint_uAttenuation_get(void * jarg1) {
  unsigned short jresult ;
  AkFileParser::EnvelopePoint *arg1 = (AkFileParser::EnvelopePoint *) 0 ;
  AkUInt16 result;
  
  arg1 = (AkFileParser::EnvelopePoint *)jarg1; 
  result = (AkUInt16) ((arg1)->uAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EnvelopePoint() {
  void * jresult ;
  AkFileParser::EnvelopePoint *result = 0 ;
  
  {
    result = (AkFileParser::EnvelopePoint *)new AkFileParser::EnvelopePoint();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EnvelopePoint(void * jarg1) {
  AkFileParser::EnvelopePoint *arg1 = (AkFileParser::EnvelopePoint *) 0 ;
  
  arg1 = (AkFileParser::EnvelopePoint *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Iterator_pItem_set(void * jarg1, void * jarg2) {
  Iterator *arg1 = (Iterator *) 0 ;
  PlaylistItem *arg2 = (PlaylistItem *) 0 ;
  
  arg1 = (Iterator *)jarg1; 
  arg2 = (PlaylistItem *)jarg2; 
  if (arg1) (arg1)->pItem = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Iterator_pItem_get(void * jarg1) {
  void * jresult ;
  Iterator *arg1 = (Iterator *) 0 ;
  PlaylistItem *result = 0 ;
  
  arg1 = (Iterator *)jarg1; 
  result = (PlaylistItem *) ((arg1)->pItem);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Iterator_NextIter(void * jarg1) {
  void * jresult ;
  Iterator *arg1 = (Iterator *) 0 ;
  Iterator *result = 0 ;
  
  arg1 = (Iterator *)jarg1; 
  {
    result = (Iterator *) &(arg1)->operator ++();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Iterator_PrevIter(void * jarg1) {
  void * jresult ;
  Iterator *arg1 = (Iterator *) 0 ;
  Iterator *result = 0 ;
  
  arg1 = (Iterator *)jarg1; 
  {
    result = (Iterator *) &(arg1)->operator --();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Iterator_GetItem(void * jarg1) {
  void * jresult ;
  Iterator *arg1 = (Iterator *) 0 ;
  PlaylistItem *result = 0 ;
  
  arg1 = (Iterator *)jarg1; 
  {
    result = (PlaylistItem *) &(arg1)->operator *();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Iterator_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Iterator *arg1 = (Iterator *) 0 ;
  Iterator *arg2 = 0 ;
  bool result;
  
  arg1 = (Iterator *)jarg1; 
  arg2 = (Iterator *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    result = (bool)((Iterator const *)arg1)->operator ==((Iterator const &)*arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Iterator_IsDifferentFrom(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Iterator *arg1 = (Iterator *) 0 ;
  Iterator *arg2 = 0 ;
  bool result;
  
  arg1 = (Iterator *)jarg1; 
  arg2 = (Iterator *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    result = (bool)((Iterator const *)arg1)->operator !=((Iterator const &)*arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Iterator() {
  void * jresult ;
  Iterator *result = 0 ;
  
  {
    result = (Iterator *)new Iterator();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Iterator(void * jarg1) {
  Iterator *arg1 = (Iterator *) 0 ;
  
  arg1 = (Iterator *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPoolDefault_Get() {
  long jresult ;
  AkMemPoolId result;
  
  {
    result = (AkMemPoolId)ArrayPoolDefault::Get();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArrayPoolDefault() {
  void * jresult ;
  ArrayPoolDefault *result = 0 ;
  
  {
    result = (ArrayPoolDefault *)new ArrayPoolDefault();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayPoolDefault(void * jarg1) {
  ArrayPoolDefault *arg1 = (ArrayPoolDefault *) 0 ;
  
  arg1 = (ArrayPoolDefault *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT long SWIGSTDCALL CSharp_ArrayPoolLEngineDefault_Get() {
  long jresult ;
  AkMemPoolId result;
  
  {
    result = (AkMemPoolId)ArrayPoolLEngineDefault::Get();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArrayPoolLEngineDefault() {
  void * jresult ;
  ArrayPoolLEngineDefault *result = 0 ;
  
  {
    result = (ArrayPoolLEngineDefault *)new ArrayPoolLEngineDefault();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArrayPoolLEngineDefault(void * jarg1) {
  ArrayPoolLEngineDefault *arg1 = (ArrayPoolLEngineDefault *) 0 ;
  
  arg1 = (ArrayPoolLEngineDefault *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkArrayAllocatorDefault_Alloc(long jarg1, unsigned long jarg2) {
  void * jresult ;
  AkMemPoolId arg1 ;
  size_t arg2 ;
  void *result = 0 ;
  
  arg1 = (AkMemPoolId)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    result = (void *)AkArrayAllocatorDefault::Alloc(arg1,arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkArrayAllocatorDefault_Free(long jarg1, void * jarg2) {
  AkMemPoolId arg1 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (AkMemPoolId)jarg1; 
  arg2 = jarg2; 
  {
    AkArrayAllocatorDefault::Free(arg1,arg2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkArrayAllocatorDefault() {
  void * jresult ;
  AkArrayAllocatorDefault *result = 0 ;
  
  {
    result = (AkArrayAllocatorDefault *)new AkArrayAllocatorDefault();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkArrayAllocatorDefault(void * jarg1) {
  AkArrayAllocatorDefault *arg1 = (AkArrayAllocatorDefault *) 0 ;
  
  arg1 = (AkArrayAllocatorDefault *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkArrayAllocatorAlignedSimd_Alloc(long jarg1, unsigned long jarg2) {
  void * jresult ;
  AkMemPoolId arg1 ;
  size_t arg2 ;
  void *result = 0 ;
  
  arg1 = (AkMemPoolId)jarg1; 
  arg2 = (size_t)jarg2; 
  {
    result = (void *)AkArrayAllocatorAlignedSimd::Alloc(arg1,arg2);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkArrayAllocatorAlignedSimd_Free(long jarg1, void * jarg2) {
  AkMemPoolId arg1 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (AkMemPoolId)jarg1; 
  arg2 = jarg2; 
  {
    AkArrayAllocatorAlignedSimd::Free(arg1,arg2);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkArrayAllocatorAlignedSimd() {
  void * jresult ;
  AkArrayAllocatorAlignedSimd *result = 0 ;
  
  {
    result = (AkArrayAllocatorAlignedSimd *)new AkArrayAllocatorAlignedSimd();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkArrayAllocatorAlignedSimd(void * jarg1) {
  AkArrayAllocatorAlignedSimd *arg1 = (AkArrayAllocatorAlignedSimd *) 0 ;
  
  arg1 = (AkArrayAllocatorAlignedSimd *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlaylistItem__SWIG_0() {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)new AK::SoundEngine::DynamicSequence::PlaylistItem(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlaylistItem__SWIG_1(void * jarg1) {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1;
  if (!arg1) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)new AK::SoundEngine::DynamicSequence::PlaylistItem((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlaylistItem(void * jarg1) {
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      delete arg1; 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaylistItem_Assign(void * jarg1, void * jarg2) {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *) &(arg1)->operator =((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlaylistItem_IsEqualTo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  bool result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (bool)(arg1)->operator ==((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlaylistItem_SetExternalSources(void * jarg1, unsigned long jarg2, void * jarg3) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkUInt32 arg2 ;
  AkExternalSourceInfo *arg3 = (AkExternalSourceInfo *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkExternalSourceInfo *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)(arg1)->SetExternalSources(arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlaylistItem_audioNodeID_set(void * jarg1, unsigned long jarg2) {
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->audioNodeID = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PlaylistItem_audioNodeID_get(void * jarg1) {
  unsigned long jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkUniqueID result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  result = (AkUniqueID) ((arg1)->audioNodeID);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlaylistItem_msDelay_set(void * jarg1, long jarg2) {
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->msDelay = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_PlaylistItem_msDelay_get(void * jarg1) {
  long jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  AkTimeMs result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  result = (AkTimeMs) ((arg1)->msDelay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlaylistItem_pCustomInfo_set(void * jarg1, void * jarg2) {
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pCustomInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaylistItem_pCustomInfo_get(void * jarg1) {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *) 0 ;
  void *result = 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg1; 
  result = (void *) ((arg1)->pCustomInfo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkPlaylistArray() {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)new AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 >(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkPlaylistArray(void * jarg1) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      delete arg1; 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Begin(void * jarg1) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  Iterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = ((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > const *)arg1)->Begin(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = new Iterator((const Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_End(void * jarg1) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  Iterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = ((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > const *)arg1)->End(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = new Iterator((const Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_FindEx(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  Iterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = ((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > const *)arg1)->FindEx((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = new Iterator((const Iterator &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Erase__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  Iterator *arg2 = 0 ;
  Iterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (Iterator *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (arg1)->Erase(*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = new Iterator((const Iterator &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_Erase__SWIG_1(void * jarg1, unsigned int jarg2) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      (arg1)->Erase(arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_EraseSwap(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  Iterator *arg2 = 0 ;
  Iterator result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (Iterator *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (arg1)->EraseSwap(*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = new Iterator((const Iterator &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylistArray_Reserve(void * jarg1, unsigned long jarg2) {
  int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AkUInt32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)(arg1)->Reserve(arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkPlaylistArray_Reserved(void * jarg1) {
  unsigned long jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkUInt32)((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > const *)arg1)->Reserved(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_Term(void * jarg1) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      (arg1)->Term(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkPlaylistArray_Length(void * jarg1) {
  unsigned long jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkUInt32)((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > const *)arg1)->Length(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  bool result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (bool)((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > const *)arg1)->IsEmpty(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Exists(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > const *)arg1)->Exists((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_AddLast__SWIG_0(void * jarg1) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)(arg1)->AddLast(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_AddLast__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)(arg1)->AddLast((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Last(void * jarg1) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *) &(arg1)->Last(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_RemoveLast(void * jarg1) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      (arg1)->RemoveLast(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylistArray_Remove(void * jarg1, void * jarg2) {
  int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)(arg1)->Remove((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlaylistArray_RemoveSwap(void * jarg1, void * jarg2) {
  int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (AK::SoundEngine::DynamicSequence::PlaylistItem *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)(arg1)->RemoveSwap((AK::SoundEngine::DynamicSequence::PlaylistItem const &)*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_RemoveAll(void * jarg1) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      (arg1)->RemoveAll(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_ItemAtIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  unsigned int arg2 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *) &((AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > const *)arg1)->operator [](arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlaylistArray_Insert(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  unsigned int arg2 ;
  AK::SoundEngine::DynamicSequence::PlaylistItem *result = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::PlaylistItem *)(arg1)->Insert(arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_GrowArray__SWIG_0(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AkUInt32 arg2 ;
  bool result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (bool)(arg1)->GrowArray(arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_GrowArray__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  bool result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (bool)(arg1)->GrowArray(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlaylistArray_Resize(void * jarg1, unsigned long jarg2) {
  unsigned int jresult ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AkUInt32 arg2 ;
  bool result;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (bool)(arg1)->Resize(arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlaylistArray_Transfer(void * jarg1, void * jarg2) {
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *) 0 ;
  AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4,AkArrayAllocatorDefault > *arg2 = 0 ;
  
  arg1 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1; 
  arg2 = (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4,AkArrayAllocatorDefault > *)jarg2;
  if (!arg2) {
    return ;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      (arg1)->Transfer(*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Playlist_Enqueue__SWIG_0(void * jarg1, unsigned long jarg2, long jarg3, void * jarg4, unsigned long jarg5, void * jarg6) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AkTimeMs arg3 ;
  void *arg4 = (void *) 0 ;
  AkUInt32 arg5 ;
  AkExternalSourceInfo *arg6 = (AkExternalSourceInfo *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4; 
  arg5 = (AkUInt32)jarg5; 
  arg6 = (AkExternalSourceInfo *)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)(arg1)->Enqueue(arg2,arg3,arg4,arg5,arg6); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Playlist_Enqueue__SWIG_1(void * jarg1, unsigned long jarg2, long jarg3, void * jarg4, unsigned long jarg5) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AkTimeMs arg3 ;
  void *arg4 = (void *) 0 ;
  AkUInt32 arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4; 
  arg5 = (AkUInt32)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)(arg1)->Enqueue(arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Playlist_Enqueue__SWIG_2(void * jarg1, unsigned long jarg2, long jarg3, void * jarg4) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AkTimeMs arg3 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)(arg1)->Enqueue(arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Playlist_Enqueue__SWIG_3(void * jarg1, unsigned long jarg2, long jarg3) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)(arg1)->Enqueue(arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Playlist_Enqueue__SWIG_4(void * jarg1, unsigned long jarg2) {
  int jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  AkUniqueID arg2 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)(arg1)->Enqueue(arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Playlist() {
  void * jresult ;
  AK::SoundEngine::DynamicSequence::Playlist *result = 0 ;
  
  {
    result = (AK::SoundEngine::DynamicSequence::Playlist *)new AK::SoundEngine::DynamicSequence::Playlist();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Playlist(void * jarg1) {
  AK::SoundEngine::DynamicSequence::Playlist *arg1 = (AK::SoundEngine::DynamicSequence::Playlist *) 0 ;
  
  arg1 = (AK::SoundEngine::DynamicSequence::Playlist *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DynamicSequenceOpen__SWIG_0(unsigned long long jarg1, unsigned long jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned long jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AkCallbackFunc arg3 = (AkCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AK::SoundEngine::DynamicSequence::DynamicSequenceType arg5 ;
  AkPlayingID result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = AkCallbackSerializer::EventCallback; 
  arg4 = jarg4; 
  arg5 = (AK::SoundEngine::DynamicSequence::DynamicSequenceType)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::DynamicSequence::Open(arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DynamicSequenceOpen__SWIG_1(unsigned long long jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  unsigned long jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AkCallbackFunc arg3 = (AkCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = AkCallbackSerializer::EventCallback; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::DynamicSequence::Open(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DynamicSequenceOpen__SWIG_2(unsigned long long jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AkPlayingID result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::DynamicSequence::Open(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DynamicSequenceOpen__SWIG_3(unsigned long long jarg1) {
  unsigned long jresult ;
  AkGameObjectID arg1 ;
  AkPlayingID result;
  
  arg1 = (AkGameObjectID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::DynamicSequence::Open(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceClose(unsigned long jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Close(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePlay__SWIG_0(unsigned long jarg1, long jarg2, int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Play(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePlay__SWIG_1(unsigned long jarg1, long jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Play(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePlay__SWIG_2(unsigned long jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Play(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePause__SWIG_0(unsigned long jarg1, long jarg2, int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Pause(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePause__SWIG_1(unsigned long jarg1, long jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Pause(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequencePause__SWIG_2(unsigned long jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Pause(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceResume__SWIG_0(unsigned long jarg1, long jarg2, int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Resume(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceResume__SWIG_1(unsigned long jarg1, long jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Resume(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceResume__SWIG_2(unsigned long jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Resume(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceStop__SWIG_0(unsigned long jarg1, long jarg2, int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Stop(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceStop__SWIG_1(unsigned long jarg1, long jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Stop(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceStop__SWIG_2(unsigned long jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Stop(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceBreak(unsigned long jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::Break(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DynamicSequenceLockPlaylist(unsigned long jarg1) {
  void * jresult ;
  AkPlayingID arg1 ;
  AK::SoundEngine::DynamicSequence::Playlist *result = 0 ;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AK::SoundEngine::DynamicSequence::Playlist *)AK::SoundEngine::DynamicSequence::LockPlaylist(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DynamicSequenceUnlockPlaylist(unsigned long jarg1) {
  int jresult ;
  AkPlayingID arg1 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::DynamicSequence::UnlockPlaylist(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkOutputSettings_ePanningRule_set(void * jarg1, int jarg2) {
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkPanningRule arg2 ;
  
  arg1 = (AkOutputSettings *)jarg1; 
  arg2 = (AkPanningRule)jarg2; 
  if (arg1) (arg1)->ePanningRule = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkOutputSettings_ePanningRule_get(void * jarg1) {
  int jresult ;
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkPanningRule result;
  
  arg1 = (AkOutputSettings *)jarg1; 
  result = (AkPanningRule) ((arg1)->ePanningRule);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkOutputSettings_uChannelMask_set(void * jarg1, unsigned long jarg2) {
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkChannelMask arg2 ;
  
  arg1 = (AkOutputSettings *)jarg1; 
  arg2 = (AkChannelMask)jarg2; 
  if (arg1) (arg1)->uChannelMask = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkOutputSettings_uChannelMask_get(void * jarg1) {
  unsigned long jresult ;
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  AkChannelMask result;
  
  arg1 = (AkOutputSettings *)jarg1; 
  result = (AkChannelMask) ((arg1)->uChannelMask);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkOutputSettings() {
  void * jresult ;
  AkOutputSettings *result = 0 ;
  
  {
    result = (AkOutputSettings *)new AkOutputSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkOutputSettings(void * jarg1) {
  AkOutputSettings *arg1 = (AkOutputSettings *) 0 ;
  
  arg1 = (AkOutputSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_pfnAssertHook_set(void * jarg1, void * jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkAssertHook arg2 = (AkAssertHook) 0 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkAssertHook)jarg2; 
  if (arg1) (arg1)->pfnAssertHook = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkInitSettings_pfnAssertHook_get(void * jarg1) {
  void * jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkAssertHook result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkAssertHook) ((arg1)->pfnAssertHook);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uMaxNumPaths_set(void * jarg1, unsigned long jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxNumPaths = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkInitSettings_uMaxNumPaths_get(void * jarg1) {
  unsigned long jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxNumPaths);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uMaxNumTransitions_set(void * jarg1, unsigned long jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxNumTransitions = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkInitSettings_uMaxNumTransitions_get(void * jarg1) {
  unsigned long jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxNumTransitions);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uDefaultPoolSize_set(void * jarg1, unsigned long jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uDefaultPoolSize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkInitSettings_uDefaultPoolSize_get(void * jarg1) {
  unsigned long jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uDefaultPoolSize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_fDefaultPoolRatioThreshold_set(void * jarg1, float jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fDefaultPoolRatioThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkInitSettings_fDefaultPoolRatioThreshold_get(void * jarg1) {
  float jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fDefaultPoolRatioThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uCommandQueueSize_set(void * jarg1, unsigned long jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uCommandQueueSize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkInitSettings_uCommandQueueSize_get(void * jarg1) {
  unsigned long jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uCommandQueueSize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uPrepareEventMemoryPoolID_set(void * jarg1, long jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkMemPoolId arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkMemPoolId)jarg2; 
  if (arg1) (arg1)->uPrepareEventMemoryPoolID = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AkInitSettings_uPrepareEventMemoryPoolID_get(void * jarg1) {
  long jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkMemPoolId result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkMemPoolId) ((arg1)->uPrepareEventMemoryPoolID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_bEnableGameSyncPreparation_set(void * jarg1, unsigned int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bEnableGameSyncPreparation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkInitSettings_bEnableGameSyncPreparation_get(void * jarg1) {
  unsigned int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (bool) ((arg1)->bEnableGameSyncPreparation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uContinuousPlaybackLookAhead_set(void * jarg1, unsigned long jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uContinuousPlaybackLookAhead = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkInitSettings_uContinuousPlaybackLookAhead_get(void * jarg1) {
  unsigned long jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uContinuousPlaybackLookAhead);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uMonitorPoolSize_set(void * jarg1, unsigned long jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMonitorPoolSize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkInitSettings_uMonitorPoolSize_get(void * jarg1) {
  unsigned long jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMonitorPoolSize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_uMonitorQueuePoolSize_set(void * jarg1, unsigned long jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMonitorQueuePoolSize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkInitSettings_uMonitorQueuePoolSize_get(void * jarg1) {
  unsigned long jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMonitorQueuePoolSize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_eMainOutputType_set(void * jarg1, int jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkSinkType arg2 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkSinkType)jarg2; 
  if (arg1) (arg1)->eMainOutputType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkInitSettings_eMainOutputType_get(void * jarg1) {
  int jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkSinkType result;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkSinkType) ((arg1)->eMainOutputType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkInitSettings_settingsMainOutput_set(void * jarg1, void * jarg2) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkOutputSettings *arg2 = (AkOutputSettings *) 0 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  arg2 = (AkOutputSettings *)jarg2; 
  if (arg1) (arg1)->settingsMainOutput = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkInitSettings_settingsMainOutput_get(void * jarg1) {
  void * jresult ;
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  AkOutputSettings *result = 0 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  result = (AkOutputSettings *)& ((arg1)->settingsMainOutput);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkInitSettings() {
  void * jresult ;
  AkInitSettings *result = 0 ;
  
  {
    result = (AkInitSettings *)new AkInitSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkInitSettings(void * jarg1) {
  AkInitSettings *arg1 = (AkInitSettings *) 0 ;
  
  arg1 = (AkInitSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_GetSpeakerConfiguration__SWIG_0(int jarg1, unsigned long jarg2) {
  unsigned long jresult ;
  AkSinkType arg1 ;
  AkUInt32 arg2 ;
  AkChannelMask result;
  
  arg1 = (AkSinkType)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkChannelMask)AK::SoundEngine::GetSpeakerConfiguration(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_GetSpeakerConfiguration__SWIG_1(int jarg1) {
  unsigned long jresult ;
  AkSinkType arg1 ;
  AkChannelMask result;
  
  arg1 = (AkSinkType)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkChannelMask)AK::SoundEngine::GetSpeakerConfiguration(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_GetSpeakerConfiguration__SWIG_2() {
  unsigned long jresult ;
  AkChannelMask result;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkChannelMask)AK::SoundEngine::GetSpeakerConfiguration(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPanningRule__SWIG_0(int * jarg1, int jarg2, unsigned long jarg3) {
  int jresult ;
  AkPanningRule *arg1 = 0 ;
  AkSinkType arg2 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule *)jarg1; 
  arg2 = (AkSinkType)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::GetPanningRule(*arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPanningRule__SWIG_1(int * jarg1, int jarg2) {
  int jresult ;
  AkPanningRule *arg1 = 0 ;
  AkSinkType arg2 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule *)jarg1; 
  arg2 = (AkSinkType)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::GetPanningRule(*arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPanningRule__SWIG_2(int * jarg1) {
  int jresult ;
  AkPanningRule *arg1 = 0 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::GetPanningRule(*arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetPanningRule__SWIG_0(int jarg1, int jarg2, unsigned long jarg3) {
  int jresult ;
  AkPanningRule arg1 ;
  AkSinkType arg2 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule)jarg1; 
  arg2 = (AkSinkType)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetPanningRule(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetPanningRule__SWIG_1(int jarg1, int jarg2) {
  int jresult ;
  AkPanningRule arg1 ;
  AkSinkType arg2 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule)jarg1; 
  arg2 = (AkSinkType)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetPanningRule(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetPanningRule__SWIG_2(int jarg1) {
  int jresult ;
  AkPanningRule arg1 ;
  AKRESULT result;
  
  arg1 = (AkPanningRule)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetPanningRule(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpeakerAngles__SWIG_0(float * jarg1, unsigned long * jarg2, int jarg3, unsigned long jarg4) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 *arg2 = 0 ;
  AkSinkType arg3 ;
  AkUInt32 arg4 ;
  AKRESULT result;
  
  arg1 = (AkReal32 *)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkSinkType)jarg3; 
  arg4 = (AkUInt32)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::GetSpeakerAngles(arg1,*arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpeakerAngles__SWIG_1(float * jarg1, unsigned long * jarg2, int jarg3) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 *arg2 = 0 ;
  AkSinkType arg3 ;
  AKRESULT result;
  
  arg1 = (AkReal32 *)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkSinkType)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::GetSpeakerAngles(arg1,*arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpeakerAngles__SWIG_2(float * jarg1, unsigned long * jarg2) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkReal32 *)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::GetSpeakerAngles(arg1,*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSpeakerAngles__SWIG_0(float jarg1, unsigned long jarg2, int jarg3, unsigned long jarg4) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 arg2 ;
  AkSinkType arg3 ;
  AkUInt32 arg4 ;
  AKRESULT result;
  
  arg1 = (AkReal32 *)&jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkSinkType)jarg3; 
  arg4 = (AkUInt32)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetSpeakerAngles(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSpeakerAngles__SWIG_1(float jarg1, unsigned long jarg2, int jarg3) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 arg2 ;
  AkSinkType arg3 ;
  AKRESULT result;
  
  arg1 = (AkReal32 *)&jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkSinkType)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetSpeakerAngles(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSpeakerAngles__SWIG_2(float jarg1, unsigned long jarg2) {
  int jresult ;
  AkReal32 *arg1 = (AkReal32 *) 0 ;
  AkUInt32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkReal32 *)&jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetSpeakerAngles(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetVolumeThreshold(float jarg1) {
  int jresult ;
  AkReal32 arg1 ;
  AKRESULT result;
  
  arg1 = (AkReal32)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetVolumeThreshold(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMaxNumVoicesLimit(unsigned short jarg1) {
  int jresult ;
  AkUInt16 arg1 ;
  AKRESULT result;
  
  arg1 = (AkUInt16)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetMaxNumVoicesLimit(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RenderAudio() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::RenderAudio(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_GetIDFromString__SWIG_0(wchar_t* jarg1) {
  unsigned long jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkUInt32 result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkUInt32)AK::SoundEngine::GetIDFromString((wchar_t const *)arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_0(unsigned long jarg1, unsigned long long jarg2, unsigned long jarg3, void * jarg4, void * jarg5, unsigned long jarg6, void * jarg7, unsigned long jarg8) {
  unsigned long jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID arg8 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = AkCallbackSerializer::EventCallback; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  arg8 = (AkPlayingID)jarg8; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_1(unsigned long jarg1, unsigned long long jarg2, unsigned long jarg3, void * jarg4, void * jarg5, unsigned long jarg6, void * jarg7) {
  unsigned long jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = AkCallbackSerializer::EventCallback; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2,arg3,arg4,arg5,arg6,arg7); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_2(unsigned long jarg1, unsigned long long jarg2, unsigned long jarg3, void * jarg4, void * jarg5, unsigned long jarg6) {
  unsigned long jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = AkCallbackSerializer::EventCallback; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2,arg3,arg4,arg5,arg6); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_3(unsigned long jarg1, unsigned long long jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  unsigned long jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = AkCallbackSerializer::EventCallback; 
  arg5 = jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_4(unsigned long jarg1, unsigned long long jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_5(unsigned long jarg1, unsigned long long jarg2) {
  unsigned long jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkPlayingID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_6(wchar_t* jarg1, unsigned long long jarg2, unsigned long jarg3, void * jarg4, void * jarg5, unsigned long jarg6, void * jarg7, unsigned long jarg8) {
  unsigned long jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID arg8 ;
  AkPlayingID result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = AkCallbackSerializer::EventCallback; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  arg8 = (AkPlayingID)jarg8; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_7(wchar_t* jarg1, unsigned long long jarg2, unsigned long jarg3, void * jarg4, void * jarg5, unsigned long jarg6, void * jarg7) {
  unsigned long jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkExternalSourceInfo *arg7 = (AkExternalSourceInfo *) 0 ;
  AkPlayingID result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = AkCallbackSerializer::EventCallback; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  arg7 = (AkExternalSourceInfo *)jarg7; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_8(wchar_t* jarg1, unsigned long long jarg2, unsigned long jarg3, void * jarg4, void * jarg5, unsigned long jarg6) {
  unsigned long jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkUInt32 arg6 ;
  AkPlayingID result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = AkCallbackSerializer::EventCallback; 
  arg5 = jarg5; 
  arg6 = (AkUInt32)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_9(wchar_t* jarg1, unsigned long long jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  unsigned long jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkCallbackFunc arg4 = (AkCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AkPlayingID result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = AkCallbackSerializer::EventCallback; 
  arg5 = jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_10(wchar_t* jarg1, unsigned long long jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkUInt32 arg3 ;
  AkPlayingID result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PostEvent__SWIG_11(wchar_t* jarg1, unsigned long long jarg2) {
  unsigned long jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkPlayingID result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkPlayingID)AK::SoundEngine::PostEvent((wchar_t const *)arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_0(unsigned long jarg1, int jarg2, unsigned long long jarg3, long jarg4, int jarg5, unsigned long jarg6) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AkPlayingID arg6 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  arg6 = (AkPlayingID)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2,arg3,arg4,arg5,arg6); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_1(unsigned long jarg1, int jarg2, unsigned long long jarg3, long jarg4, int jarg5) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_2(unsigned long jarg1, int jarg2, unsigned long long jarg3, long jarg4) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_3(unsigned long jarg1, int jarg2, unsigned long long jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_4(unsigned long jarg1, int jarg2) {
  int jresult ;
  AkUniqueID arg1 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_5(wchar_t* jarg1, int jarg2, unsigned long long jarg3, long jarg4, int jarg5, unsigned long jarg6) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AkPlayingID arg6 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  arg6 = (AkPlayingID)jarg6; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5,arg6); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_6(wchar_t* jarg1, int jarg2, unsigned long long jarg3, long jarg4, int jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_7(wchar_t* jarg1, int jarg2, unsigned long long jarg3, long jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_8(wchar_t* jarg1, int jarg2, unsigned long long jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExecuteActionOnEvent__SWIG_9(wchar_t* jarg1, int jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::SoundEngine::AkActionOnEventType arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AK::SoundEngine::AkActionOnEventType)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ExecuteActionOnEvent((wchar_t const *)arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_0(unsigned long jarg1, unsigned long long jarg2, long jarg3, unsigned int jarg4) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  bool arg4 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_1(unsigned long jarg1, unsigned long long jarg2, long jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_2(wchar_t* jarg1, unsigned long long jarg2, long jarg3, unsigned int jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  bool arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_3(wchar_t* jarg1, unsigned long long jarg2, long jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_6(unsigned long jarg1, unsigned long long jarg2, float jarg3, unsigned int jarg4) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  bool arg4 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_7(unsigned long jarg1, unsigned long long jarg2, float jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_8(wchar_t* jarg1, unsigned long long jarg2, float jarg3, unsigned int jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  bool arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SeekOnEvent__SWIG_9(wchar_t* jarg1, unsigned long long jarg2, float jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SeekOnEvent((wchar_t const *)arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CancelEventCallbackCookie(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::SoundEngine::CancelEventCallbackCookie(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_CancelEventCallback(unsigned long jarg1) {
  AkPlayingID arg1 ;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::SoundEngine::CancelEventCallback(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSourcePlayPosition__SWIG_0(unsigned long jarg1, long * jarg2, unsigned int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs *arg2 = (AkTimeMs *) 0 ;
  bool arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs *)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::GetSourcePlayPosition(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSourcePlayPosition__SWIG_1(unsigned long jarg1, long * jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkTimeMs *arg2 = (AkTimeMs *) 0 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::GetSourcePlayPosition(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopAll__SWIG_0(unsigned long long jarg1) {
  AkGameObjectID arg1 ;
  
  arg1 = (AkGameObjectID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::SoundEngine::StopAll(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopAll__SWIG_1() {
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::SoundEngine::StopAll(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopPlayingID__SWIG_0(unsigned long jarg1, long jarg2, int jarg3) {
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  AkCurveInterpolation arg3 ;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  arg3 = (AkCurveInterpolation)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::SoundEngine::StopPlayingID(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopPlayingID__SWIG_1(unsigned long jarg1, long jarg2) {
  AkPlayingID arg1 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::SoundEngine::StopPlayingID(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_StopPlayingID__SWIG_2(unsigned long jarg1) {
  AkPlayingID arg1 ;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::SoundEngine::StopPlayingID(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegisterGameObj__SWIG_0(unsigned long long jarg1, unsigned long jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::RegisterGameObj(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegisterGameObj__SWIG_1(unsigned long long jarg1) {
  int jresult ;
  AkGameObjectID arg1 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::RegisterGameObj(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegisterGameObj__SWIG_2(unsigned long long jarg1, char * jarg2, unsigned long jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  char *arg2 = (char *) 0 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::RegisterGameObj(arg1,(char const *)arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegisterGameObj__SWIG_3(unsigned long long jarg1, char * jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  char *arg2 = (char *) 0 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::RegisterGameObj(arg1,(char const *)arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnregisterGameObj(unsigned long long jarg1) {
  int jresult ;
  AkGameObjectID arg1 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::UnregisterGameObj(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnregisterAllGameObj() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::UnregisterAllGameObj(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMultiplePositions__SWIG_0(unsigned long long jarg1, void * jarg2, unsigned short jarg3, int jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkSoundPosition *arg2 = (AkSoundPosition *) 0 ;
  AkUInt16 arg3 ;
  AK::SoundEngine::MultiPositionType arg4 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkSoundPosition *)jarg2; 
  arg3 = (AkUInt16)jarg3; 
  arg4 = (AK::SoundEngine::MultiPositionType)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetMultiplePositions(arg1,(AkSoundPosition const *)arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetMultiplePositions__SWIG_1(unsigned long long jarg1, void * jarg2, unsigned short jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkSoundPosition *arg2 = (AkSoundPosition *) 0 ;
  AkUInt16 arg3 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkSoundPosition *)jarg2; 
  arg3 = (AkUInt16)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetMultiplePositions(arg1,(AkSoundPosition const *)arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetAttenuationScalingFactor(unsigned long long jarg1, float jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkReal32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkReal32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetAttenuationScalingFactor(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetListenerScalingFactor(unsigned long jarg1, float jarg2) {
  int jresult ;
  AkUInt32 arg1 ;
  AkReal32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = (AkReal32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetListenerScalingFactor(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClearBanks() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ClearBanks(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBankLoadIOSettings(float jarg1, char jarg2) {
  int jresult ;
  AkReal32 arg1 ;
  AkPriority arg2 ;
  AKRESULT result;
  
  arg1 = (AkReal32)jarg1; 
  arg2 = (AkPriority)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetBankLoadIOSettings(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_0(wchar_t* jarg1, long jarg2, unsigned long * jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkMemPoolId arg2 ;
  AkBankID *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkMemPoolId)jarg2; 
  arg3 = (AkBankID *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::LoadBank((wchar_t const *)arg1,arg2,*arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_1(unsigned long jarg1, long jarg2) {
  int jresult ;
  AkBankID arg1 ;
  AkMemPoolId arg2 ;
  AKRESULT result;
  
  arg1 = (AkBankID)jarg1; 
  arg2 = (AkMemPoolId)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::LoadBank(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_2(void * jarg1, unsigned long jarg2, unsigned long * jarg3) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  AkBankID *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkBankID *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::LoadBank((void const *)arg1,arg2,*arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_3(wchar_t* jarg1, void * jarg2, void * jarg3, long jarg4, unsigned long * jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkBankCallbackFunc arg2 = (AkBankCallbackFunc) 0 ;
  void *arg3 = (void *) 0 ;
  AkMemPoolId arg4 ;
  AkBankID *arg5 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg3 = jarg3; 
  arg4 = (AkMemPoolId)jarg4; 
  arg5 = (AkBankID *)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::LoadBank((wchar_t const *)arg1,arg2,arg3,arg4,*arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_4(unsigned long jarg1, void * jarg2, void * jarg3, long jarg4) {
  int jresult ;
  AkBankID arg1 ;
  AkBankCallbackFunc arg2 = (AkBankCallbackFunc) 0 ;
  void *arg3 = (void *) 0 ;
  AkMemPoolId arg4 ;
  AKRESULT result;
  
  arg1 = (AkBankID)jarg1; 
  arg2 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg3 = jarg3; 
  arg4 = (AkMemPoolId)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::LoadBank(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadBank__SWIG_5(void * jarg1, unsigned long jarg2, void * jarg3, void * jarg4, unsigned long * jarg5) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AkBankID *arg5 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  arg5 = (AkBankID *)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::LoadBank((void const *)arg1,arg2,arg3,arg4,*arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_0(wchar_t* jarg1, void * jarg2, long * jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  void *arg2 = (void *) 0 ;
  AkMemPoolId *arg3 = (AkMemPoolId *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkMemPoolId *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::UnloadBank((wchar_t const *)arg1,(void const *)arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_1(wchar_t* jarg1, void * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  void *arg2 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::UnloadBank((wchar_t const *)arg1,(void const *)arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_4(unsigned long jarg1, void * jarg2, long * jarg3) {
  int jresult ;
  AkBankID arg1 ;
  void *arg2 = (void *) 0 ;
  AkMemPoolId *arg3 = (AkMemPoolId *) 0 ;
  AKRESULT result;
  
  arg1 = (AkBankID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkMemPoolId *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::UnloadBank(arg1,(void const *)arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_5(unsigned long jarg1, void * jarg2) {
  int jresult ;
  AkBankID arg1 ;
  void *arg2 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AkBankID)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::UnloadBank(arg1,(void const *)arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_6(wchar_t* jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  void *arg2 = (void *) 0 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::UnloadBank((wchar_t const *)arg1,(void const *)arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnloadBank__SWIG_8(unsigned long jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  AkBankID arg1 ;
  void *arg2 = (void *) 0 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AkBankID)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::UnloadBank(arg1,(void const *)arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CancelBankCallbackCookie(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::SoundEngine::CancelBankCallbackCookie(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_0(int jarg1, wchar_t* jarg2, int jarg3) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AK::SoundEngine::AkBankContent arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = jarg2; 
  arg3 = (AK::SoundEngine::AkBankContent)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,(wchar_t const *)arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_1(int jarg1, wchar_t* jarg2) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,(wchar_t const *)arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_4(int jarg1, unsigned long jarg2, int jarg3) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkBankID arg2 ;
  AK::SoundEngine::AkBankContent arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkBankID)jarg2; 
  arg3 = (AK::SoundEngine::AkBankContent)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_5(int jarg1, unsigned long jarg2) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkBankID arg2 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkBankID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_6(int jarg1, wchar_t* jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AK::SoundEngine::AkBankContent arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  arg5 = (AK::SoundEngine::AkBankContent)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,(wchar_t const *)arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_7(int jarg1, wchar_t* jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,(wchar_t const *)arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_10(int jarg1, unsigned long jarg2, void * jarg3, void * jarg4, int jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkBankID arg2 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AK::SoundEngine::AkBankContent arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkBankID)jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  arg5 = (AK::SoundEngine::AkBankContent)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareBank__SWIG_11(int jarg1, unsigned long jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkBankID arg2 ;
  AkBankCallbackFunc arg3 = (AkBankCallbackFunc) 0 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkBankID)jarg2; 
  arg3 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareBank(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClearPreparedEvents() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ClearPreparedEvents(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareEvent__SWIG_0(int jarg1, wchar_t const* jarg2, unsigned long jarg3) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t **arg2 = (wchar_t **) 0 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  
  //Create a string array of the proper size
  unsigned short size = *jarg2;
  jarg2++; // skip size word
  arg2 = (wchar_t**)AkAlloca(size*sizeof(wchar_t*));
  unsigned long len = 0;
  //Make all pointers point to the right place.
  for(unsigned long i = 0; i < size; i++)
  {
    arg2[i] = (wchar_t*)jarg2 + len;
    len += (unsigned long)wcslen(arg2[i]) + 1;
  }
  
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareEvent(arg1,(wchar_t const **)arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareEvent__SWIG_1(int jarg1, unsigned long* jarg2, unsigned long jarg3) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkUniqueID *arg2 = (AkUniqueID *) 0 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = jarg2;
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareEvent(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareEvent__SWIG_2(int jarg1, wchar_t const* jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  wchar_t **arg2 = (wchar_t **) 0 ;
  AkUInt32 arg3 ;
  AkBankCallbackFunc arg4 = (AkBankCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  
  //Create a string array of the proper size
  unsigned short size = *jarg2;
  jarg2++; // skip size word
  arg2 = (wchar_t**)AkAlloca(size*sizeof(wchar_t*));
  unsigned long len = 0;
  //Make all pointers point to the right place.
  for(unsigned long i = 0; i < size; i++)
  {
    arg2[i] = (wchar_t*)jarg2 + len;
    len += (unsigned long)wcslen(arg2[i]) + 1;
  }
  
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg5 = jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareEvent(arg1,(wchar_t const **)arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareEvent__SWIG_3(int jarg1, unsigned long* jarg2, unsigned long jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkUniqueID *arg2 = (AkUniqueID *) 0 ;
  AkUInt32 arg3 ;
  AkBankCallbackFunc arg4 = (AkBankCallbackFunc) 0 ;
  void *arg5 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = jarg2;
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg5 = jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareEvent(arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareGameSyncs__SWIG_0(int jarg1, int jarg2, wchar_t* jarg3, wchar_t const* jarg4, unsigned long jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkGroupType arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t **arg4 = (wchar_t **) 0 ;
  AkUInt32 arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkGroupType)jarg2; 
  arg3 = jarg3; 
  
  //Create a string array of the proper size
  unsigned short size = *jarg4;
  jarg4++; // skip size word
  arg4 = (wchar_t**)AkAlloca(size*sizeof(wchar_t*));
  unsigned long len = 0;
  //Make all pointers point to the right place.
  for(unsigned long i = 0; i < size; i++)
  {
    arg4[i] = (wchar_t*)jarg4 + len;
    len += (unsigned long)wcslen(arg4[i]) + 1;
  }
  
  arg5 = (AkUInt32)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareGameSyncs(arg1,arg2,(wchar_t const *)arg3,(wchar_t const **)arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareGameSyncs__SWIG_1(int jarg1, int jarg2, unsigned long jarg3, unsigned long* jarg4, unsigned long jarg5) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkGroupType arg2 ;
  AkUInt32 arg3 ;
  AkUInt32 *arg4 = (AkUInt32 *) 0 ;
  AkUInt32 arg5 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkGroupType)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4;
  arg5 = (AkUInt32)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareGameSyncs(arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareGameSyncs__SWIG_2(int jarg1, int jarg2, wchar_t* jarg3, wchar_t const* jarg4, unsigned long jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkGroupType arg2 ;
  wchar_t *arg3 = (wchar_t *) 0 ;
  wchar_t **arg4 = (wchar_t **) 0 ;
  AkUInt32 arg5 ;
  AkBankCallbackFunc arg6 = (AkBankCallbackFunc) 0 ;
  void *arg7 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkGroupType)jarg2; 
  arg3 = jarg3; 
  
  //Create a string array of the proper size
  unsigned short size = *jarg4;
  jarg4++; // skip size word
  arg4 = (wchar_t**)AkAlloca(size*sizeof(wchar_t*));
  unsigned long len = 0;
  //Make all pointers point to the right place.
  for(unsigned long i = 0; i < size; i++)
  {
    arg4[i] = (wchar_t*)jarg4 + len;
    len += (unsigned long)wcslen(arg4[i]) + 1;
  }
  
  arg5 = (AkUInt32)jarg5; 
  arg6 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg7 = jarg7; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareGameSyncs(arg1,arg2,(wchar_t const *)arg3,(wchar_t const **)arg4,arg5,arg6,arg7); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PrepareGameSyncs__SWIG_3(int jarg1, int jarg2, unsigned long jarg3, unsigned long* jarg4, unsigned long jarg5, void * jarg6, void * jarg7) {
  int jresult ;
  AK::SoundEngine::PreparationType arg1 ;
  AkGroupType arg2 ;
  AkUInt32 arg3 ;
  AkUInt32 *arg4 = (AkUInt32 *) 0 ;
  AkUInt32 arg5 ;
  AkBankCallbackFunc arg6 = (AkBankCallbackFunc) 0 ;
  void *arg7 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AK::SoundEngine::PreparationType)jarg1; 
  arg2 = (AkGroupType)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4;
  arg5 = (AkUInt32)jarg5; 
  arg6 = (AkBankCallbackFunc) AkCallbackSerializer::BankCallback; 
  arg7 = jarg7; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PrepareGameSyncs(arg1,arg2,arg3,arg4,arg5,arg6,arg7); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetActiveListeners(unsigned long long jarg1, unsigned long jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetActiveListeners(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetListenerSpatialization__SWIG_0(unsigned long jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  AkUInt32 arg1 ;
  bool arg2 ;
  AkSpeakerVolumes *arg3 = (AkSpeakerVolumes *) 0 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (AkSpeakerVolumes *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetListenerSpatialization(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetListenerSpatialization__SWIG_1(unsigned long jarg1, unsigned int jarg2) {
  int jresult ;
  AkUInt32 arg1 ;
  bool arg2 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetListenerSpatialization(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetListenerPipeline(unsigned long jarg1, unsigned int jarg2, unsigned int jarg3) {
  int jresult ;
  AkUInt32 arg1 ;
  bool arg2 ;
  bool arg3 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetListenerPipeline(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_0(unsigned long jarg1, float jarg2, unsigned long long jarg3, long jarg4, int jarg5) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue(arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_1(unsigned long jarg1, float jarg2, unsigned long long jarg3, long jarg4) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_2(unsigned long jarg1, float jarg2, unsigned long long jarg3) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_3(unsigned long jarg1, float jarg2) {
  int jresult ;
  AkRtpcID arg1 ;
  AkRtpcValue arg2 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_4(wchar_t* jarg1, float jarg2, unsigned long long jarg3, long jarg4, int jarg5) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AkCurveInterpolation arg5 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  arg5 = (AkCurveInterpolation)jarg5; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue((wchar_t const *)arg1,arg2,arg3,arg4,arg5); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_5(wchar_t* jarg1, float jarg2, unsigned long long jarg3, long jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AkTimeMs arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  arg4 = (AkTimeMs)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue((wchar_t const *)arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_6(wchar_t* jarg1, float jarg2, unsigned long long jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue((wchar_t const *)arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetRTPCValue__SWIG_7(wchar_t* jarg1, float jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkRtpcValue arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkRtpcValue)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetRTPCValue((wchar_t const *)arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_0(unsigned long jarg1, unsigned long long jarg2, long jarg3, int jarg4) {
  int jresult ;
  AkRtpcID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AkCurveInterpolation arg4 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = (AkCurveInterpolation)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_1(unsigned long jarg1, unsigned long long jarg2, long jarg3) {
  int jresult ;
  AkRtpcID arg1 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_2(unsigned long jarg1, unsigned long long jarg2) {
  int jresult ;
  AkRtpcID arg1 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_3(unsigned long jarg1) {
  int jresult ;
  AkRtpcID arg1 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_4(wchar_t* jarg1, unsigned long long jarg2, long jarg3, int jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AkCurveInterpolation arg4 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  arg4 = (AkCurveInterpolation)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue((wchar_t const *)arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_5(wchar_t* jarg1, unsigned long long jarg2, long jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkTimeMs arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkTimeMs)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue((wchar_t const *)arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_6(wchar_t* jarg1, unsigned long long jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue((wchar_t const *)arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResetRTPCValue__SWIG_7(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::ResetRTPCValue((wchar_t const *)arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSwitch__SWIG_0(unsigned long jarg1, unsigned long jarg2, unsigned long long jarg3) {
  int jresult ;
  AkSwitchGroupID arg1 ;
  AkSwitchStateID arg2 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = (AkSwitchGroupID)jarg1; 
  arg2 = (AkSwitchStateID)jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetSwitch(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSwitch__SWIG_1(wchar_t* jarg1, wchar_t* jarg2, unsigned long long jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AkGameObjectID arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  arg3 = (AkGameObjectID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetSwitch((wchar_t const *)arg1,(wchar_t const *)arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostTrigger__SWIG_0(unsigned long jarg1, unsigned long long jarg2) {
  int jresult ;
  AkTriggerID arg1 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = (AkTriggerID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PostTrigger(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostTrigger__SWIG_1(wchar_t* jarg1, unsigned long long jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::PostTrigger((wchar_t const *)arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetState__SWIG_0(unsigned long jarg1, unsigned long jarg2) {
  int jresult ;
  AkStateGroupID arg1 ;
  AkStateID arg2 ;
  AKRESULT result;
  
  arg1 = (AkStateGroupID)jarg1; 
  arg2 = (AkStateID)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetState(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetState__SWIG_1(wchar_t* jarg1, wchar_t* jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetState((wchar_t const *)arg1,(wchar_t const *)arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGameObjectAuxSendValues(unsigned long long jarg1, void * jarg2, unsigned long jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkAuxSendValue *arg2 = (AkAuxSendValue *) 0 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkAuxSendValue *)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetGameObjectAuxSendValues(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetGameObjectOutputBusVolume(unsigned long long jarg1, float jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkReal32 arg2 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkReal32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetGameObjectOutputBusVolume(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetActorMixerEffect(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkUniqueID arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUniqueID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetActorMixerEffect(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBusEffect__SWIG_0(unsigned long jarg1, unsigned long jarg2, unsigned long jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkUniqueID arg3 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUniqueID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetBusEffect(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBusEffect__SWIG_1(wchar_t* jarg1, unsigned long jarg2, unsigned long jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkUInt32 arg2 ;
  AkUniqueID arg3 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUniqueID)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetBusEffect((wchar_t const *)arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetObjectObstructionAndOcclusion(unsigned long long jarg1, unsigned long jarg2, float jarg3, float jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AkReal32 arg3 ;
  AkReal32 arg4 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = (AkReal32)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetObjectObstructionAndOcclusion(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartOutputCapture(wchar_t* jarg1) {
  int jresult ;
  AkOSChar *arg1 = (AkOSChar *) 0 ;
  AKRESULT result;
  
  CONVERT_WIDE_TO_OSCHAR(jarg1, arg1); 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::StartOutputCapture((wchar_t const *)arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StopOutputCapture() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::StopOutputCapture(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StartProfilerCapture(wchar_t* jarg1) {
  int jresult ;
  AkOSChar *arg1 = (AkOSChar *) 0 ;
  AKRESULT result;
  
  CONVERT_WIDE_TO_OSCHAR(jarg1, arg1); 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::StartProfilerCapture((wchar_t const *)arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StopProfilerCapture() {
  int jresult ;
  AKRESULT result;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::StopProfilerCapture(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddSecondaryOutput(unsigned long jarg1, int jarg2, unsigned long jarg3) {
  int jresult ;
  AkUInt32 arg1 ;
  AkSinkType arg2 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = (AkSinkType)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::AddSecondaryOutput(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RemoveSecondaryOutput(unsigned long jarg1, int jarg2) {
  int jresult ;
  AkUInt32 arg1 ;
  AkSinkType arg2 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = (AkSinkType)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::RemoveSecondaryOutput(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetSecondaryOutputVolume(unsigned long jarg1, int jarg2, float jarg3) {
  int jresult ;
  AkUInt32 arg1 ;
  AkSinkType arg2 ;
  AkReal32 arg3 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = (AkSinkType)jarg2; 
  arg3 = (AkReal32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::SetSecondaryOutputVolume(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_playlistID_set(void * jarg1, unsigned long jarg2) {
  AkMusicPlaylistCallbackInfo *arg1 = (AkMusicPlaylistCallbackInfo *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AkMusicPlaylistCallbackInfo *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->playlistID = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_playlistID_get(void * jarg1) {
  unsigned long jresult ;
  AkMusicPlaylistCallbackInfo *arg1 = (AkMusicPlaylistCallbackInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkMusicPlaylistCallbackInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->playlistID);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_uNumPlaylistItems_set(void * jarg1, unsigned long jarg2) {
  AkMusicPlaylistCallbackInfo *arg1 = (AkMusicPlaylistCallbackInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkMusicPlaylistCallbackInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uNumPlaylistItems = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_uNumPlaylistItems_get(void * jarg1) {
  unsigned long jresult ;
  AkMusicPlaylistCallbackInfo *arg1 = (AkMusicPlaylistCallbackInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkMusicPlaylistCallbackInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->uNumPlaylistItems);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_uPlaylistSelection_set(void * jarg1, unsigned long jarg2) {
  AkMusicPlaylistCallbackInfo *arg1 = (AkMusicPlaylistCallbackInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkMusicPlaylistCallbackInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uPlaylistSelection = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_uPlaylistSelection_get(void * jarg1) {
  unsigned long jresult ;
  AkMusicPlaylistCallbackInfo *arg1 = (AkMusicPlaylistCallbackInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkMusicPlaylistCallbackInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->uPlaylistSelection);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_uPlaylistItemDone_set(void * jarg1, unsigned long jarg2) {
  AkMusicPlaylistCallbackInfo *arg1 = (AkMusicPlaylistCallbackInfo *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkMusicPlaylistCallbackInfo *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uPlaylistItemDone = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkMusicPlaylistCallbackInfo_uPlaylistItemDone_get(void * jarg1) {
  unsigned long jresult ;
  AkMusicPlaylistCallbackInfo *arg1 = (AkMusicPlaylistCallbackInfo *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkMusicPlaylistCallbackInfo *)jarg1; 
  result = (AkUInt32) ((arg1)->uPlaylistItemDone);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMusicPlaylistCallbackInfo() {
  void * jresult ;
  AkMusicPlaylistCallbackInfo *result = 0 ;
  
  {
    result = (AkMusicPlaylistCallbackInfo *)new AkMusicPlaylistCallbackInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMusicPlaylistCallbackInfo(void * jarg1) {
  AkMusicPlaylistCallbackInfo *arg1 = (AkMusicPlaylistCallbackInfo *) 0 ;
  
  arg1 = (AkMusicPlaylistCallbackInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMemSettings_uMaxNumPools_set(void * jarg1, unsigned long jarg2) {
  AkMemSettings *arg1 = (AkMemSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkMemSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxNumPools = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkMemSettings_uMaxNumPools_get(void * jarg1) {
  unsigned long jresult ;
  AkMemSettings *arg1 = (AkMemSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkMemSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxNumPools);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMemSettings() {
  void * jresult ;
  AkMemSettings *result = 0 ;
  
  {
    result = (AkMemSettings *)new AkMemSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMemSettings(void * jarg1) {
  AkMemSettings *arg1 = (AkMemSettings *) 0 ;
  
  arg1 = (AkMemSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkMusicSettings_fStreamingLookAheadRatio_set(void * jarg1, float jarg2) {
  AkMusicSettings *arg1 = (AkMusicSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkMusicSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fStreamingLookAheadRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkMusicSettings_fStreamingLookAheadRatio_get(void * jarg1) {
  float jresult ;
  AkMusicSettings *arg1 = (AkMusicSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkMusicSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fStreamingLookAheadRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkMusicSettings() {
  void * jresult ;
  AkMusicSettings *result = 0 ;
  
  {
    result = (AkMusicSettings *)new AkMusicSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkMusicSettings(void * jarg1) {
  AkMusicSettings *arg1 = (AkMusicSettings *) 0 ;
  
  arg1 = (AkMusicSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iCurrentPosition_set(void * jarg1, long jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iCurrentPosition = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AkSegmentInfo_iCurrentPosition_get(void * jarg1) {
  long jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iCurrentPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iPreEntryDuration_set(void * jarg1, long jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iPreEntryDuration = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AkSegmentInfo_iPreEntryDuration_get(void * jarg1) {
  long jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iPreEntryDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iActiveDuration_set(void * jarg1, long jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iActiveDuration = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AkSegmentInfo_iActiveDuration_get(void * jarg1) {
  long jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iActiveDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iPostExitDuration_set(void * jarg1, long jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iPostExitDuration = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AkSegmentInfo_iPostExitDuration_get(void * jarg1) {
  long jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iPostExitDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkSegmentInfo_iRemainingLookAheadTime_set(void * jarg1, long jarg2) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs arg2 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  arg2 = (AkTimeMs)jarg2; 
  if (arg1) (arg1)->iRemainingLookAheadTime = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AkSegmentInfo_iRemainingLookAheadTime_get(void * jarg1) {
  long jresult ;
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  AkTimeMs result;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  result = (AkTimeMs) ((arg1)->iRemainingLookAheadTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkSegmentInfo() {
  void * jresult ;
  AkSegmentInfo *result = 0 ;
  
  {
    result = (AkSegmentInfo *)new AkSegmentInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkSegmentInfo(void * jarg1) {
  AkSegmentInfo *arg1 = (AkSegmentInfo *) 0 ;
  
  arg1 = (AkSegmentInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPlayingSegmentInfo__SWIG_0(unsigned long jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  AkPlayingID arg1 ;
  AkSegmentInfo *arg2 = 0 ;
  bool arg3 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkSegmentInfo *)jarg2;
  if (!arg2) {
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::MusicEngine::GetPlayingSegmentInfo(arg1,*arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPlayingSegmentInfo__SWIG_1(unsigned long jarg1, void * jarg2) {
  int jresult ;
  AkPlayingID arg1 ;
  AkSegmentInfo *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkPlayingID)jarg1; 
  arg2 = (AkSegmentInfo *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::MusicEngine::GetPlayingSegmentInfo(arg1,*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkCallbackSerializer_Init(void * jarg1, unsigned long jarg2) {
  int jresult ;
  void *arg1 = (void *) 0 ;
  AkUInt32 arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AkCallbackSerializer::Init(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCallbackSerializer_Term() {
  {
    AkCallbackSerializer::Term();
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkCallbackSerializer_Lock() {
  void * jresult ;
  void *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (void *)AkCallbackSerializer::Lock(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCallbackSerializer_SetLocalOutput(unsigned long jarg1) {
  AkUInt32 arg1 ;
  
  arg1 = (AkUInt32)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AkCallbackSerializer::SetLocalOutput(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkCallbackSerializer_Unlock() {
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AkCallbackSerializer::Unlock(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkCallbackSerializer() {
  void * jresult ;
  AkCallbackSerializer *result = 0 ;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkCallbackSerializer *)new AkCallbackSerializer(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkCallbackSerializer(void * jarg1) {
  AkCallbackSerializer *arg1 = (AkCallbackSerializer *) 0 ;
  
  arg1 = (AkCallbackSerializer *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      delete arg1; 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostCode(int jarg1, int jarg2) {
  int jresult ;
  AK::Monitor::ErrorCode arg1 ;
  AK::Monitor::ErrorLevel arg2 ;
  AKRESULT result;
  
  arg1 = (AK::Monitor::ErrorCode)jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::Monitor::PostCode(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PostString__SWIG_0(wchar_t* jarg1, int jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AK::Monitor::ErrorLevel arg2 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AK::Monitor::ErrorLevel)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::Monitor::PostString((wchar_t const *)arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long SWIGSTDCALL CSharp_GetTimeStamp() {
  long jresult ;
  AkTimeMs result;
  
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkTimeMs)AK::Monitor::GetTimeStamp(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ResolveDialogueEvent__SWIG_0(unsigned long jarg1, unsigned long* jarg2, unsigned long jarg3, unsigned long jarg4) {
  unsigned long jresult ;
  AkUniqueID arg1 ;
  AkArgumentValueID *arg2 = (AkArgumentValueID *) 0 ;
  AkUInt32 arg3 ;
  AkPlayingID arg4 ;
  AkUniqueID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2;
  arg3 = (AkUInt32)jarg3; 
  arg4 = (AkPlayingID)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkUniqueID)AK::SoundEngine::DynamicDialogue::ResolveDialogueEvent(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  
  
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ResolveDialogueEvent__SWIG_1(unsigned long jarg1, unsigned long* jarg2, unsigned long jarg3) {
  unsigned long jresult ;
  AkUniqueID arg1 ;
  AkArgumentValueID *arg2 = (AkArgumentValueID *) 0 ;
  AkUInt32 arg3 ;
  AkUniqueID result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = jarg2;
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkUniqueID)AK::SoundEngine::DynamicDialogue::ResolveDialogueEvent(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fCenterPct_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fCenterPct = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fCenterPct_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fCenterPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_pannerType_set(void * jarg1, int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkPannerType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkPannerType)jarg2; 
  if (arg1) (arg1)->pannerType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPositioningInfo_pannerType_get(void * jarg1) {
  int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkPannerType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkPannerType) ((arg1)->pannerType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_posSourceType_set(void * jarg1, int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkPositionSourceType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkPositionSourceType)jarg2; 
  if (arg1) (arg1)->posSourceType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPositioningInfo_posSourceType_get(void * jarg1) {
  int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkPositionSourceType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkPositionSourceType) ((arg1)->posSourceType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_bUpdateEachFrame_set(void * jarg1, unsigned int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUpdateEachFrame = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPositioningInfo_bUpdateEachFrame_get(void * jarg1) {
  unsigned int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (bool) ((arg1)->bUpdateEachFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_bUseSpatialization_set(void * jarg1, unsigned int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseSpatialization = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPositioningInfo_bUseSpatialization_get(void * jarg1) {
  unsigned int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (bool) ((arg1)->bUseSpatialization);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_bUseAttenuation_set(void * jarg1, unsigned int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseAttenuation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPositioningInfo_bUseAttenuation_get(void * jarg1) {
  unsigned int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (bool) ((arg1)->bUseAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_bUseConeAttenuation_set(void * jarg1, unsigned int jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseConeAttenuation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPositioningInfo_bUseConeAttenuation_get(void * jarg1) {
  unsigned int jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  bool result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (bool) ((arg1)->bUseConeAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fInnerAngle_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fInnerAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fInnerAngle_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fInnerAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fOuterAngle_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fOuterAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fOuterAngle_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fOuterAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fConeMaxAttenuation_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fConeMaxAttenuation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fConeMaxAttenuation_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fConeMaxAttenuation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_LPFCone_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkLPFType)jarg2; 
  if (arg1) (arg1)->LPFCone = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_LPFCone_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkLPFType) ((arg1)->LPFCone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fMaxDistance_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fMaxDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fMaxDistance_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fMaxDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fVolDryAtMaxDist_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fVolDryAtMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fVolDryAtMaxDist_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fVolDryAtMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fVolAuxGameDefAtMaxDist_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fVolAuxGameDefAtMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fVolAuxGameDefAtMaxDist_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fVolAuxGameDefAtMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_fVolAuxUserDefAtMaxDist_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fVolAuxUserDefAtMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_fVolAuxUserDefAtMaxDist_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkReal32) ((arg1)->fVolAuxUserDefAtMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPositioningInfo_LPFValueAtMaxDist_set(void * jarg1, float jarg2) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType arg2 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  arg2 = (AkLPFType)jarg2; 
  if (arg1) (arg1)->LPFValueAtMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPositioningInfo_LPFValueAtMaxDist_get(void * jarg1) {
  float jresult ;
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  AkLPFType result;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  result = (AkLPFType) ((arg1)->LPFValueAtMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkPositioningInfo() {
  void * jresult ;
  AkPositioningInfo *result = 0 ;
  
  {
    result = (AkPositioningInfo *)new AkPositioningInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkPositioningInfo(void * jarg1) {
  AkPositioningInfo *arg1 = (AkPositioningInfo *) 0 ;
  
  arg1 = (AkPositioningInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObjectInfo_objID_set(void * jarg1, unsigned long jarg2) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->objID = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkObjectInfo_objID_get(void * jarg1) {
  unsigned long jresult ;
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkObjectInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->objID);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObjectInfo_parentID_set(void * jarg1, unsigned long jarg2) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkUniqueID arg2 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  arg2 = (AkUniqueID)jarg2; 
  if (arg1) (arg1)->parentID = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkObjectInfo_parentID_get(void * jarg1) {
  unsigned long jresult ;
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkUniqueID result;
  
  arg1 = (AkObjectInfo *)jarg1; 
  result = (AkUniqueID) ((arg1)->parentID);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkObjectInfo_iDepth_set(void * jarg1, long jarg2) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkInt32 arg2 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  arg2 = (AkInt32)jarg2; 
  if (arg1) (arg1)->iDepth = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_AkObjectInfo_iDepth_get(void * jarg1) {
  long jresult ;
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  AkInt32 result;
  
  arg1 = (AkObjectInfo *)jarg1; 
  result = (AkInt32) ((arg1)->iDepth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkObjectInfo() {
  void * jresult ;
  AkObjectInfo *result = 0 ;
  
  {
    result = (AkObjectInfo *)new AkObjectInfo();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkObjectInfo(void * jarg1) {
  AkObjectInfo *arg1 = (AkObjectInfo *) 0 ;
  
  arg1 = (AkObjectInfo *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPosition(unsigned long long jarg1, void * jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkSoundPosition *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkSoundPosition *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetPosition(arg1,*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetActiveListeners(unsigned long long jarg1, unsigned long * jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetActiveListeners(arg1,*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetListenerPosition(unsigned long jarg1, void * jarg2) {
  int jresult ;
  AkUInt32 arg1 ;
  AkListenerPosition *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = (AkListenerPosition *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetListenerPosition(arg1,*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetListenerSpatialization(unsigned long jarg1, int * jarg2, void * jarg3) {
  int jresult ;
  AkUInt32 arg1 ;
  bool *arg2 = 0 ;
  AkSpeakerVolumes *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUInt32)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (AkSpeakerVolumes *)jarg3;
  if (!arg3) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetListenerSpatialization(arg1,*arg2,*arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetRTPCValue__SWIG_0(unsigned long jarg1, unsigned long long jarg2, float * jarg3, int * jarg4) {
  int jresult ;
  AkRtpcID arg1 ;
  AkGameObjectID arg2 ;
  AkRtpcValue *arg3 = 0 ;
  AK::SoundEngine::Query::RTPCValue_type *arg4 = 0 ;
  AKRESULT result;
  
  arg1 = (AkRtpcID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkRtpcValue *)jarg3; 
  arg4 = (AK::SoundEngine::Query::RTPCValue_type *)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetRTPCValue(arg1,arg2,*arg3,*arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetRTPCValue__SWIG_1(wchar_t* jarg1, unsigned long long jarg2, float * jarg3, int * jarg4) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkRtpcValue *arg3 = 0 ;
  AK::SoundEngine::Query::RTPCValue_type *arg4 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkRtpcValue *)jarg3; 
  arg4 = (AK::SoundEngine::Query::RTPCValue_type *)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetRTPCValue((wchar_t const *)arg1,arg2,*arg3,*arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSwitch__SWIG_0(unsigned long jarg1, unsigned long long jarg2, unsigned long * jarg3) {
  int jresult ;
  AkSwitchGroupID arg1 ;
  AkGameObjectID arg2 ;
  AkSwitchStateID *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkSwitchGroupID)jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkSwitchStateID *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetSwitch(arg1,arg2,*arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSwitch__SWIG_1(wchar_t* jarg1, unsigned long long jarg2, unsigned long * jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkGameObjectID arg2 ;
  AkSwitchStateID *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkGameObjectID)jarg2; 
  arg3 = (AkSwitchStateID *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetSwitch((wchar_t const *)arg1,arg2,*arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetState__SWIG_0(unsigned long jarg1, unsigned long * jarg2) {
  int jresult ;
  AkStateGroupID arg1 ;
  AkStateID *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkStateGroupID)jarg1; 
  arg2 = (AkStateID *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetState(arg1,*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetState__SWIG_1(wchar_t* jarg1, unsigned long * jarg2) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkStateID *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkStateID *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetState((wchar_t const *)arg1,*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetGameObjectAuxSendValues(unsigned long long jarg1, void * jarg2, unsigned long * jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkAuxSendValue *arg2 = (AkAuxSendValue *) 0 ;
  AkUInt32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkAuxSendValue *)jarg2; 
  arg3 = (AkUInt32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetGameObjectAuxSendValues(arg1,arg2,*arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetGameObjectDryLevelValue(unsigned long long jarg1, float * jarg2) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkReal32 *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkReal32 *)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetGameObjectDryLevelValue(arg1,*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetObjectObstructionAndOcclusion(unsigned long long jarg1, unsigned long jarg2, float * jarg3, float * jarg4) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 arg2 ;
  AkReal32 *arg3 = 0 ;
  AkReal32 *arg4 = 0 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkReal32 *)jarg3; 
  arg4 = (AkReal32 *)jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetObjectObstructionAndOcclusion(arg1,arg2,*arg3,*arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QueryAudioObjectIDs__SWIG_0(unsigned long jarg1, unsigned long * jarg2, void * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 *arg2 = 0 ;
  AkObjectInfo *arg3 = (AkObjectInfo *) 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkObjectInfo *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::QueryAudioObjectIDs(arg1,*arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_QueryAudioObjectIDs__SWIG_1(wchar_t* jarg1, unsigned long * jarg2, void * jarg3) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AkUInt32 *arg2 = 0 ;
  AkObjectInfo *arg3 = (AkObjectInfo *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = (AkObjectInfo *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::QueryAudioObjectIDs((wchar_t const *)arg1,*arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPositioningInfo(unsigned long jarg1, void * jarg2) {
  int jresult ;
  AkUniqueID arg1 ;
  AkPositioningInfo *arg2 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkPositioningInfo *)jarg2;
  if (!arg2) {
    return 0;
  } 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetPositioningInfo(arg1,*arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetIsGameObjectActive(unsigned long long jarg1) {
  unsigned int jresult ;
  AkGameObjectID arg1 ;
  bool result;
  
  arg1 = (AkGameObjectID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (bool)AK::SoundEngine::Query::GetIsGameObjectActive(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetMaxRadius(unsigned long long jarg1) {
  float jresult ;
  AkGameObjectID arg1 ;
  AkReal32 result;
  
  arg1 = (AkGameObjectID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkReal32)AK::SoundEngine::Query::GetMaxRadius(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_GetEventIDFromPlayingID(unsigned long jarg1) {
  unsigned long jresult ;
  AkPlayingID arg1 ;
  AkUniqueID result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkUniqueID)AK::SoundEngine::Query::GetEventIDFromPlayingID(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GetGameObjectFromPlayingID(unsigned long jarg1) {
  unsigned long long jresult ;
  AkPlayingID arg1 ;
  AkGameObjectID result;
  
  arg1 = (AkPlayingID)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = AK::SoundEngine::Query::GetGameObjectFromPlayingID(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPlayingIDsFromGameObject(unsigned long long jarg1, unsigned long * jarg2, unsigned long* jarg3) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkUInt32 *arg2 = 0 ;
  AkPlayingID *arg3 = (AkPlayingID *) 0 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkUInt32 *)jarg2; 
  arg3 = jarg3;
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetPlayingIDsFromGameObject(arg1,*arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCustomPropertyValue__SWIG_0(unsigned long jarg1, unsigned long jarg2, long * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkInt32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkInt32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetCustomPropertyValue(arg1,arg2,*arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCustomPropertyValue__SWIG_1(unsigned long jarg1, unsigned long jarg2, float * jarg3) {
  int jresult ;
  AkUniqueID arg1 ;
  AkUInt32 arg2 ;
  AkReal32 *arg3 = 0 ;
  AKRESULT result;
  
  arg1 = (AkUniqueID)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkReal32 *)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::SoundEngine::Query::GetCustomPropertyValue(arg1,arg2,*arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AK_SPEAKER_SETUP_FIX_LEFT_TO_CENTER(unsigned long * jarg1) {
  AkUInt32 *arg1 = 0 ;
  
  arg1 = (AkUInt32 *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK_SPEAKER_SETUP_FIX_LEFT_TO_CENTER(*arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AK_SPEAKER_SETUP_FIX_SIDE_TO_REAR(unsigned long * jarg1) {
  AkUInt32 *arg1 = 0 ;
  
  arg1 = (AkUInt32 *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK_SPEAKER_SETUP_FIX_SIDE_TO_REAR(*arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AK_SPEAKER_SETUP_CONVERT_TO_SUPPORTED(unsigned long * jarg1) {
  AkUInt32 *arg1 = 0 ;
  
  arg1 = (AkUInt32 *)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK_SPEAKER_SETUP_CONVERT_TO_SUPPORTED(*arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChannelMaskToNumChannels(unsigned long jarg1) {
  unsigned int jresult ;
  AkChannelMask arg1 ;
  unsigned int result;
  
  arg1 = (AkChannelMask)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (unsigned int)ChannelMaskToNumChannels(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChannelMaskFromNumChannels(unsigned int jarg1) {
  unsigned long jresult ;
  unsigned int arg1 ;
  AkChannelMask result;
  
  arg1 = (unsigned int)jarg1; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AkChannelMask)ChannelMaskFromNumChannels(arg1); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChannelIndexToDisplayIndex(int jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  AkChannelOrdering arg1 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (AkChannelOrdering)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (unsigned int)ChannelIndexToDisplayIndex(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddPlayerMotionDevice__SWIG_0(unsigned char jarg1, unsigned long jarg2, unsigned long jarg3, void * jarg4) {
  int jresult ;
  AkUInt8 arg1 ;
  AkUInt32 arg2 ;
  AkUInt32 arg3 ;
  void *arg4 = (void *) 0 ;
  AKRESULT result;
  
  arg1 = (AkUInt8)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  arg4 = jarg4; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::MotionEngine::AddPlayerMotionDevice(arg1,arg2,arg3,arg4); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddPlayerMotionDevice__SWIG_1(unsigned char jarg1, unsigned long jarg2, unsigned long jarg3) {
  int jresult ;
  AkUInt8 arg1 ;
  AkUInt32 arg2 ;
  AkUInt32 arg3 ;
  AKRESULT result;
  
  arg1 = (AkUInt8)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      result = (AKRESULT)AK::MotionEngine::AddPlayerMotionDevice(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemovePlayerMotionDevice(unsigned char jarg1, unsigned long jarg2, unsigned long jarg3) {
  AkUInt8 arg1 ;
  AkUInt32 arg2 ;
  AkUInt32 arg3 ;
  
  arg1 = (AkUInt8)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  arg3 = (AkUInt32)jarg3; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::MotionEngine::RemovePlayerMotionDevice(arg1,arg2,arg3); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetPlayerListener(unsigned char jarg1, unsigned char jarg2) {
  AkUInt8 arg1 ;
  AkUInt8 arg2 ;
  
  arg1 = (AkUInt8)jarg1; 
  arg2 = (AkUInt8)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::MotionEngine::SetPlayerListener(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetPlayerVolume(unsigned char jarg1, float jarg2) {
  AkUInt8 arg1 ;
  AkReal32 arg2 ;
  
  arg1 = (AkUInt8)jarg1; 
  arg2 = (AkReal32)jarg2; 
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      AK::MotionEngine::SetPlayerVolume(arg1,arg2); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkStreamMgrSettings_uMemorySize_set(void * jarg1, unsigned long jarg2) {
  AkStreamMgrSettings *arg1 = (AkStreamMgrSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkStreamMgrSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMemorySize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkStreamMgrSettings_uMemorySize_get(void * jarg1) {
  unsigned long jresult ;
  AkStreamMgrSettings *arg1 = (AkStreamMgrSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkStreamMgrSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMemorySize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkStreamMgrSettings() {
  void * jresult ;
  AkStreamMgrSettings *result = 0 ;
  
  {
    result = (AkStreamMgrSettings *)new AkStreamMgrSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkStreamMgrSettings(void * jarg1) {
  AkStreamMgrSettings *arg1 = (AkStreamMgrSettings *) 0 ;
  
  arg1 = (AkStreamMgrSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_pIOMemory_set(void * jarg1, void * jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = jarg2; 
  if (arg1) (arg1)->pIOMemory = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkDeviceSettings_pIOMemory_get(void * jarg1) {
  void * jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  void *result = 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (void *) ((arg1)->pIOMemory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uIOMemorySize_set(void * jarg1, unsigned long jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uIOMemorySize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkDeviceSettings_uIOMemorySize_get(void * jarg1) {
  unsigned long jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uIOMemorySize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uIOMemoryAlignment_set(void * jarg1, unsigned long jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uIOMemoryAlignment = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkDeviceSettings_uIOMemoryAlignment_get(void * jarg1) {
  unsigned long jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uIOMemoryAlignment);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_ePoolAttributes_set(void * jarg1, int jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkMemPoolAttributes arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkMemPoolAttributes)jarg2; 
  if (arg1) (arg1)->ePoolAttributes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkDeviceSettings_ePoolAttributes_get(void * jarg1) {
  int jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkMemPoolAttributes result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkMemPoolAttributes) ((arg1)->ePoolAttributes);
  jresult = (AkMemPoolAttributes)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uGranularity_set(void * jarg1, unsigned long jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uGranularity = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkDeviceSettings_uGranularity_get(void * jarg1) {
  unsigned long jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uGranularity);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uSchedulerTypeFlags_set(void * jarg1, unsigned long jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uSchedulerTypeFlags = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkDeviceSettings_uSchedulerTypeFlags_get(void * jarg1) {
  unsigned long jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uSchedulerTypeFlags);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_threadProperties_set(void * jarg1, void * jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkThreadProperties *arg2 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkThreadProperties *)jarg2; 
  if (arg1) (arg1)->threadProperties = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkDeviceSettings_threadProperties_get(void * jarg1) {
  void * jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkThreadProperties *result = 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkThreadProperties *)& ((arg1)->threadProperties);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_fTargetAutoStmBufferLength_set(void * jarg1, float jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fTargetAutoStmBufferLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDeviceSettings_fTargetAutoStmBufferLength_get(void * jarg1) {
  float jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fTargetAutoStmBufferLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_uMaxConcurrentIO_set(void * jarg1, unsigned long jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uMaxConcurrentIO = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkDeviceSettings_uMaxConcurrentIO_get(void * jarg1) {
  unsigned long jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uMaxConcurrentIO);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkDeviceSettings_fMaxCacheRatio_set(void * jarg1, float jarg2) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fMaxCacheRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkDeviceSettings_fMaxCacheRatio_get(void * jarg1) {
  float jresult ;
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fMaxCacheRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkDeviceSettings() {
  void * jresult ;
  AkDeviceSettings *result = 0 ;
  
  {
    result = (AkDeviceSettings *)new AkDeviceSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkDeviceSettings(void * jarg1) {
  AkDeviceSettings *arg1 = (AkDeviceSettings *) 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_threadLEngine_set(void * jarg1, void * jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *arg2 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkThreadProperties *)jarg2; 
  if (arg1) (arg1)->threadLEngine = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlatformInitSettings_threadLEngine_get(void * jarg1) {
  void * jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *result = 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkThreadProperties *)& ((arg1)->threadLEngine);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_threadBankManager_set(void * jarg1, void * jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *arg2 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkThreadProperties *)jarg2; 
  if (arg1) (arg1)->threadBankManager = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlatformInitSettings_threadBankManager_get(void * jarg1) {
  void * jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *result = 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkThreadProperties *)& ((arg1)->threadBankManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_threadMonitor_set(void * jarg1, void * jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *arg2 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkThreadProperties *)jarg2; 
  if (arg1) (arg1)->threadMonitor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AkPlatformInitSettings_threadMonitor_get(void * jarg1) {
  void * jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkThreadProperties *result = 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkThreadProperties *)& ((arg1)->threadMonitor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_uLEngineDefaultPoolSize_set(void * jarg1, unsigned long jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uLEngineDefaultPoolSize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkPlatformInitSettings_uLEngineDefaultPoolSize_get(void * jarg1) {
  unsigned long jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkUInt32) ((arg1)->uLEngineDefaultPoolSize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_fLEngineDefaultPoolRatioThreshold_set(void * jarg1, float jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkReal32 arg2 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkReal32)jarg2; 
  if (arg1) (arg1)->fLEngineDefaultPoolRatioThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_AkPlatformInitSettings_fLEngineDefaultPoolRatioThreshold_get(void * jarg1) {
  float jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkReal32 result;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkReal32) ((arg1)->fLEngineDefaultPoolRatioThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_uNumRefillsInVoice_set(void * jarg1, unsigned short jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt16 arg2 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkUInt16)jarg2; 
  if (arg1) (arg1)->uNumRefillsInVoice = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AkPlatformInitSettings_uNumRefillsInVoice_get(void * jarg1) {
  unsigned short jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkUInt16 result;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkUInt16) ((arg1)->uNumRefillsInVoice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_eAudioQuality_set(void * jarg1, int jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkSoundQuality arg2 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = (AkSoundQuality)jarg2; 
  if (arg1) (arg1)->eAudioQuality = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkPlatformInitSettings_eAudioQuality_get(void * jarg1) {
  int jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  AkSoundQuality result;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (AkSoundQuality) ((arg1)->eAudioQuality);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkPlatformInitSettings_bGlobalFocus_set(void * jarg1, unsigned int jarg2) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  bool arg2 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bGlobalFocus = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AkPlatformInitSettings_bGlobalFocus_get(void * jarg1) {
  unsigned int jresult ;
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  bool result;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  result = (bool) ((arg1)->bGlobalFocus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkPlatformInitSettings() {
  void * jresult ;
  AkPlatformInitSettings *result = 0 ;
  
  {
    result = (AkPlatformInitSettings *)new AkPlatformInitSettings();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkPlatformInitSettings(void * jarg1) {
  AkPlatformInitSettings *arg1 = (AkPlatformInitSettings *) 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkThreadProperties_nPriority_set(void * jarg1, int jarg2) {
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  int arg2 ;
  
  arg1 = (AkThreadProperties *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nPriority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AkThreadProperties_nPriority_get(void * jarg1) {
  int jresult ;
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  int result;
  
  arg1 = (AkThreadProperties *)jarg1; 
  result = (int) ((arg1)->nPriority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkThreadProperties_dwAffinityMask_set(void * jarg1, unsigned long jarg2) {
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkThreadProperties *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->dwAffinityMask = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkThreadProperties_dwAffinityMask_get(void * jarg1) {
  unsigned long jresult ;
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkThreadProperties *)jarg1; 
  result = (AkUInt32) ((arg1)->dwAffinityMask);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AkThreadProperties_uStackSize_set(void * jarg1, unsigned long jarg2) {
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  AkUInt32 arg2 ;
  
  arg1 = (AkThreadProperties *)jarg1; 
  arg2 = (AkUInt32)jarg2; 
  if (arg1) (arg1)->uStackSize = arg2;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AkThreadProperties_uStackSize_get(void * jarg1) {
  unsigned long jresult ;
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  AkUInt32 result;
  
  arg1 = (AkThreadProperties *)jarg1; 
  result = (AkUInt32) ((arg1)->uStackSize);
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AkThreadProperties() {
  void * jresult ;
  AkThreadProperties *result = 0 ;
  
  {
    result = (AkThreadProperties *)new AkThreadProperties();
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AkThreadProperties(void * jarg1) {
  AkThreadProperties *arg1 = (AkThreadProperties *) 0 ;
  
  arg1 = (AkThreadProperties *)jarg1; 
  {
    delete arg1;
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_Term() {
  {
    if (AK::SoundEngine::IsInitialized()) 	{
      Term(); 	
    } 	else 	{
      AKPLATFORM::OutputDebugMsg("Wwise: AkGlobalSoundEngineInitializer.cs Awake() was not executed yet.  Set the Script Execution Order properly so the current call is executed after."); 	
    } 
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_Init(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  int jresult ;
  AkMemSettings *arg1 = (AkMemSettings *) 0 ;
  AkStreamMgrSettings *arg2 = (AkStreamMgrSettings *) 0 ;
  AkDeviceSettings *arg3 = (AkDeviceSettings *) 0 ;
  AkInitSettings *arg4 = (AkInitSettings *) 0 ;
  AkPlatformInitSettings *arg5 = (AkPlatformInitSettings *) 0 ;
  AkMusicSettings *arg6 = (AkMusicSettings *) 0 ;
  AKRESULT result;
  
  arg1 = (AkMemSettings *)jarg1; 
  arg2 = (AkStreamMgrSettings *)jarg2; 
  arg3 = (AkDeviceSettings *)jarg3; 
  arg4 = (AkInitSettings *)jarg4; 
  arg5 = (AkPlatformInitSettings *)jarg5; 
  arg6 = (AkMusicSettings *)jarg6; 
  {
    result = (AKRESULT)Init(arg1,arg2,arg3,arg4,arg5,arg6);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultStreamSettings(void * jarg1) {
  AkStreamMgrSettings *arg1 = 0 ;
  
  arg1 = (AkStreamMgrSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultStreamSettings(*arg1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultDeviceSettings(void * jarg1) {
  AkDeviceSettings *arg1 = 0 ;
  
  arg1 = (AkDeviceSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultDeviceSettings(*arg1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultMusicSettings(void * jarg1) {
  AkMusicSettings *arg1 = 0 ;
  
  arg1 = (AkMusicSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultMusicSettings(*arg1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultInitSettings(void * jarg1) {
  AkInitSettings *arg1 = 0 ;
  
  arg1 = (AkInitSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultInitSettings(*arg1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetDefaultPlatformInitSettings(void * jarg1) {
  AkPlatformInitSettings *arg1 = 0 ;
  
  arg1 = (AkPlatformInitSettings *)jarg1;
  if (!arg1) {
    return ;
  } 
  {
    GetDefaultPlatformInitSettings(*arg1);
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBasePath(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    result = (AKRESULT)SetBasePath((wchar_t const *)arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetBankPath(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    result = (AKRESULT)SetBankPath((wchar_t const *)arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetAudioSrcPath(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    result = (AKRESULT)SetAudioSrcPath((wchar_t const *)arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetCurrentLanguage(wchar_t* jarg1) {
  int jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  AKRESULT result;
  
  arg1 = jarg1; 
  {
    result = (AKRESULT)SetCurrentLanguage((wchar_t const *)arg1);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetObjectPosition(unsigned long long jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  int jresult ;
  AkGameObjectID arg1 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AkReal32 arg4 ;
  AkReal32 arg5 ;
  AkReal32 arg6 ;
  AkReal32 arg7 ;
  AKRESULT result;
  
  arg1 = (AkGameObjectID)jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = (AkReal32)jarg4; 
  arg5 = (AkReal32)jarg5; 
  arg6 = (AkReal32)jarg6; 
  arg7 = (AkReal32)jarg7; 
  {
    result = (AKRESULT)SetObjectPosition(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SetListenerPosition(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, unsigned long jarg10) {
  int jresult ;
  AkReal32 arg1 ;
  AkReal32 arg2 ;
  AkReal32 arg3 ;
  AkReal32 arg4 ;
  AkReal32 arg5 ;
  AkReal32 arg6 ;
  AkReal32 arg7 ;
  AkReal32 arg8 ;
  AkReal32 arg9 ;
  AkUInt32 arg10 ;
  AKRESULT result;
  
  arg1 = (AkReal32)jarg1; 
  arg2 = (AkReal32)jarg2; 
  arg3 = (AkReal32)jarg3; 
  arg4 = (AkReal32)jarg4; 
  arg5 = (AkReal32)jarg5; 
  arg6 = (AkReal32)jarg6; 
  arg7 = (AkReal32)jarg7; 
  arg8 = (AkReal32)jarg8; 
  arg9 = (AkReal32)jarg9; 
  arg10 = (AkUInt32)jarg10; 
  {
    result = (AKRESULT)SetListenerPosition(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsInitialized() {
  unsigned int jresult ;
  bool result;
  
  {
    result = (bool)IsInitialized();
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT WwiseObjectIDext * SWIGSTDCALL CSharp_WwiseObjectID_SWIGUpcast(WwiseObjectID *jarg1) {
    return (WwiseObjectIDext *)jarg1;
}

SWIGEXPORT AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > * SWIGSTDCALL CSharp_Playlist_SWIGUpcast(AK::SoundEngine::DynamicSequence::Playlist *jarg1) {
    return (AkArray< AK::SoundEngine::DynamicSequence::PlaylistItem,AK::SoundEngine::DynamicSequence::PlaylistItem const &,ArrayPoolDefault,4 > *)jarg1;
}

#ifdef __cplusplus
}
#endif

